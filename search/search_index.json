{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\ude80 Do zero a implanta\u00e7\u00e3o","text":"<p>Iniciaremos com uma introdu\u00e7\u00e3o a conceitos de programa\u00e7\u00e3o web, prepara\u00e7\u00e3o do ambiente e vamos evoluindo at\u00e9 escrever nossa primeira aplica\u00e7\u00e3o utilizando t\u00e9cnicas profissionais, para no fim colocarmos a aplica\u00e7\u00e3o no ar.</p> <p>\u00c9 um curso pensado para iniciantes na \u00e1rea de computa\u00e7\u00e3o, curiosos, entusiastas e todo mundo que queira entender todo o processo de cria\u00e7\u00e3o de uma aplica\u00e7\u00e3o at\u00e9 sua implanta\u00e7\u00e3o.</p>"},{"location":"#o-que-veremos","title":"O que veremos?","text":"<p>Est\u00e1 previsto para este curso o estudo e desenvolvimento de uma aplica\u00e7\u00e3o utilizando-se da t\u00e9cnica do tdd, que \u00e9 um desenvolvimento guiado por testes (n\u00e3o se preocupe se n\u00e3o est\u00e1 familiarizado com o termo), assim como cria\u00e7\u00e3o de um ambiente de desenvolvimento automatizado utilizando integra\u00e7\u00e3o cont\u00ednua e implanta\u00e7\u00e3o.</p> <p>Assustado com tantos termos t\u00e9cnicos? N\u00e3o se preocupe, voc\u00ea vai ver que as coisas s\u00e3o mais simples do que se parecem.</p> <p>Ao final deste curso voc\u00ea dever\u00e1 ter no ar uma aplica\u00e7\u00e3o como esta apresentada aqui.</p>"},{"location":"#requisitos","title":"Requisitos","text":"<ul> <li>Um computador com acesso a internet</li> <li>Vontade de aprender</li> </ul>"},{"location":"criar/","title":"\ud83d\udcdd Criando uma tarefa","text":"<p>Certo, temos a funcionalidade de listagem de tarefas j\u00e1 funcionando.</p> <ul> <li> listar as tarefas</li> <li> adicionar tarefa</li> <li> remover tarefa</li> <li> ordenar a listagem por estado</li> <li> finalizar uma tarefa</li> <li> exibir uma tarefa de forma detalhada</li> </ul> <p>Vamos seguir em frente e escrever a funcionalidade de criar uma tarefa.</p> <p>Continuamos o ciclo do TDD e a primeira coisa a se fazer \u00e9 pensar em um teste que n\u00e3o esteja implementado.</p> <p>Daqui pra frente sempre que ver \u274c escreva o teste mostrado e em seguida rode os testes que devem falhar.</p> <p>Logo em seguida dever\u00e1 aparecer \u2705 e o trecho de c\u00f3digo que deve ser alterado. Lembre-se de rodar os testes para garantir que est\u00e3o funcionando.</p> <p>E n\u00e3o se esque\u00e7a que testes v\u00e3o no arquivo <code>test_gerenciador.py</code> e o c\u00f3digo em <code>gerenciador.py</code>.</p>"},{"location":"criar/#passo-a-passo","title":"Passo a passo","text":"<p>Se testarmos o recurso de tarefas utilizando o m\u00e9todo POST, veremos que teremos como retorno o c\u00f3digo de status <code>405 METHOD NOT ALLOWED</code>.</p> <p>Para testar utilize o comando:</p> <p><code>http POST localhost:8000/tarefas</code></p> <p>Isto \u00e9 porque at\u00e9 agora s\u00f3 implementamos o m\u00e9todo get.</p> <p>Vamos partir disto para escrever nosso primeiro teste. Primeiro teste ent\u00e3o verificaremos o recurso <code>tarefas</code> utilizando o m\u00e9todo <code>POST</code>.</p> <p>O c\u00f3digo de status deve ser diferente de 405. O teste pode ser visto abaixo.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_recurso_tarefas_deve_aceitar_o_verbo_post():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\")\n    assert resposta.status_code != status.HTTP_405_METHOD_NOT_ALLOWED\n</code></pre> <p>Pr\u00f3xima etapa do ciclo \u00e9 escrevermos o c\u00f3digo suficiente para satisfazer o nosso teste.</p> <p>O c\u00f3digo \u00e9 simples, vamos criar um novo m\u00e9todo <code>criar</code> e associ\u00e1-los ao m\u00e9todo <code>POST</code>do recurso tarefas.</p> <p>\u2705</p> <p>gerenciador_tarefas/gerenciador.py<pre><code>@app.post('/tarefas')\ndef criar():\n    pass\n</code></pre> Ok, o teste est\u00e1 passando.</p> <p>Vamos criar uma nova situa\u00e7\u00e3o onde o nosso c\u00f3digo falha.</p> <p>Na nossa requisi\u00e7\u00e3o, caso o corpo n\u00e3o tenha um t\u00edtulo, deveremos receber o c\u00f3digo de status <code>422 Unprocessable Entity</code> que significa que a \"entidade\", que neste caso \u00e9 a tarefa, foi passada com algum problema.</p> <p>Vamos transformar isto em um teste.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_quando_uma_tarefa_e_submetida_deve_possuir_um_titulo():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\", json={})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n</code></pre> <p>Agora vamos utilizar o pydantic como desserializador da nossa entrada e validador.</p> <p>Desseria...o que?</p> <p>Quando recebemos uma requisi\u00e7\u00e3o, em seu corpo temos um conte\u00fado que est\u00e1 no formato json, precisamos ler e entender esta estrutura e transformar em algo que possa manipular no python.</p> <p>Criaremos ent\u00e3o uma Tarefa, que possui um titulo que \u00e9 uma string. Esta tarefa \u00e9 baseada em um modelo da biblioteca pydantic.</p> gerenciador_tarefas/gerenciador.py<pre><code>from pydantic import BaseModel\n\n# ...\n\nclass Tarefa(BaseModel):\n    titulo: str\n</code></pre> <p>Adicionamos ent\u00e3o ao m\u00e9todo criar uma tarefa e isto \u00e9 suficiente para ele saber que ao ser acessado via post, deve conter em seu corpo uma tarefa com um t\u00edtulo.</p> gerenciador_tarefas/gerenciador.py<pre><code>@app.post('/tarefas')\ndef criar(tarefa: Tarefa):\n    pass\n</code></pre> <p>E o resultado final que faz os testes passarem \u00e9:</p> <p>\u2705</p> gerenciador_tarefas/gerenciador.py<pre><code>from fastapi import FastAPI\nfrom pydantic import BaseModel\n\n\napp = FastAPI()\n\n\nclass Tarefa(BaseModel):\n    titulo: str\n\n\nTAREFAS = []\n\n\n@app.get('/tarefas')\ndef listar():\n    return TAREFAS\n\n\n@app.post('/tarefas')\ndef criar(tarefa: Tarefa):\n    pass\n</code></pre> <p>E o ciclo continua, temos uma restri\u00e7\u00e3o no titulo que \u00e9 \"deve possuir entre 3 e 50 caracteres\", vamos testar isto.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_titulo_da_tarefa_deve_conter_entre_3_e_50_caracteres():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\", json={\"titulo\": 2 * \"*\"})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n    resposta = cliente.post(\"/tarefas\", json={\"titulo\": 51 * \"*\"})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n</code></pre> <p>Para resolver esta valida\u00e7\u00e3o substituiremos o tipo <code>str</code> da nossa tarefa por <code>constr</code>, que em ingl\u00eas quer dizer \"constrained str\", e em bom portugu\u00eas \"string com restri\u00e7\u00f5es\".</p> <p>Definimos ent\u00e3o <code>min_length</code>(comprimento m\u00ednimo) como 3 e <code>max_length</code>(comprimento m\u00e1ximo) como 50.</p> <p>\u2705</p> gerenciador_tarefas/gerenciador.py<pre><code>from pydantic import BaseModel, constr\n\n\n\nclass Tarefa(BaseModel):\n    titulo: constr(min_length=3, max_length=50)\n</code></pre> <p>Testes passando, vamos continuar a construir nossa tarefa.</p> <p>Al\u00e9m de titulo, nossa tarefa deve possuir uma descri\u00e7\u00e3o.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_quando_uma_tarefa_e_submetida_deve_possuir_uma_descricao():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\", json={\"titulo\": \"titulo\"})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n</code></pre> <p>Adicionamos a nossa tarefa o campo descri\u00e7\u00e3o.</p> <p>\u2705</p> gerenciador_tarefas/gerenciador.py<pre><code>class Tarefa(BaseModel):\n    titulo: constr(min_length=3, max_length=50)\n    descricao: str\n</code></pre> <p>Mas a descri\u00e7\u00e3o s\u00f3 pode ter 140 caracteres.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_descricao_da_tarefa_pode_conter_no_maximo_140_caracteres():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\", json={\"titulo\": \"titulo\", \"descricao\": \"*\" * 141})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n</code></pre> <p>Assim como o t\u00edtulo, vamos mudar de <code>str</code> para <code>constr</code> e adicionar a restri\u00e7\u00e3o no comprimento do texto.</p> <p>\u2705</p> gerenciador_tarefas/gerenciador.py<pre><code>class Tarefa(BaseModel):\n    titulo: constr(min_length=3, max_length=50)\n    descricao: constr(max_length=140)\n</code></pre> <p>Outra coisa \u00e9 ao pedir a cria\u00e7\u00e3o da tarefa, a mesma deve ser retornada como resposta.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_quando_criar_uma_tarefa_a_mesma_deve_ser_retornada():\n    cliente = TestClient(app)\n    tarefa_esperada = {\"titulo\": \"titulo\", \"descricao\": \"descricao\"}\n    resposta = cliente.post(\"/tarefas\", json=tarefa_esperada)\n    tarefa_criada = resposta.json()\n    assert tarefa_criada[\"titulo\"] == tarefa_esperada[\"titulo\"]\n    assert tarefa_criada[\"descricao\"] == tarefa_esperada[\"descricao\"]\n    TAREFAS.clear()\n</code></pre> <p>\ud83e\udd14 E se eu retornar a tarefa?</p> <p>\u2705</p> gerenciador_tarefas/gerenciador.py<pre><code>@app.post('/tarefas')\ndef criar(tarefa: Tarefa):\n    return tarefa\n</code></pre> <p>\ud83d\ude05 Esta foi simples.</p> <p>Outra coisa que precisamos verificar \u00e9 que cada tarefa deve possuir um identificador \u00fanico.</p> <p>Para checar isto vamos adicionar duas tarefas e seus <code>ids</code>retornados devem ser diferentes.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_quando_criar_uma_tarefa_seu_id_deve_ser_unico():\n    cliente = TestClient(app)\n    tarefa1 = {\"titulo\": \"titulo1\", \"descricao\": \"descricao1\"}\n    tarefa2 = {\"titulo\": \"titulo2\", \"descricao\": \"descricao1\"}\n    resposta1 = cliente.post(\"/tarefas\", json=tarefa1)\n    resposta2 = cliente.post(\"/tarefas\", json=tarefa2)\n    assert resposta1.json()[\"id\"] != resposta2.json()[\"id\"]\n    TAREFAS.clear()\n</code></pre> <p>Como o <code>id</code> \u00e9 uma coisa que s\u00f3 deve aparecer na resposta, vamos a algumas mudan\u00e7as.</p> <p>A primeira \u00e9 que renomearemos a nossa <code>Tarefa</code>para <code>TarefaEntrada</code>e criaremos uma segunda estrutura Tarefa que \u00e9 baseada na entrada, por\u00e9m possui tamb\u00e9m um id.</p> <p>Para torna-lo \u00fanico, o faremos do tipo uuid, que \u00e9 um identificador universalmente \u00fanico.</p> gerenciador_tarefas/gerenciador.py<pre><code>from uuid import UUID, uuid4\n\n# ...\n\nclass TarefaEntrada(BaseModel):\n    titulo: constr(min_length=3, max_length=50)\n    descricao: constr(max_length=140)\n\n\nclass Tarefa(TarefaEntrada):\n    id: UUID\n</code></pre> <p>Depois vamos no m\u00e9todo criar e transformar nossa tarefa de entrada em um dicion\u00e1rio, em seguida, adicionamos um id \u00fanico gerado pelo python.</p> gerenciador_tarefas/gerenciador.py<pre><code>@app.post('/tarefas')\ndef criar(tarefa: TarefaEntrada):\n    nova_tarefa = tarefa.dict()\n    nova_tarefa.update({\"id\": uuid4()})\n    return nova_tarefa\n</code></pre> <p>Outro detalhe \u00e9 avisar ao nosso m\u00e9todo post que utilize nossa nova estrutura para gerar a sa\u00edda no formato json.</p> gerenciador_tarefas/gerenciador.py<pre><code>@app.post('/tarefas', response_model=Tarefa)\ndef criar(tarefa: TarefaEntrada):\n</code></pre> <p>\u2705</p> gerenciador_tarefas/gerenciador.py<pre><code>from uuid import UUID, uuid4\n\n\nclass TarefaEntrada(BaseModel):\n    titulo: constr(min_length=3, max_length=50)\n    descricao: constr(max_length=140)\n\n\nclass Tarefa(TarefaEntrada):\n    id: UUID\n\n\n@app.post('/tarefas', response_model=Tarefa)\ndef criar(tarefa: TarefaEntrada):\n    nova_tarefa = tarefa.dict()\n    nova_tarefa.update({\"id\": uuid4()})\n    return nova_tarefa\n</code></pre> <p>Certo, testes passando novamente. Ainda temos alguma coisa pra verificar?</p> <p>Sim! Nossa tarefa tamb\u00e9m deve possuir um estado que por padr\u00e3o ser\u00e1 \"n\u00e3o finalizado\".</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_quando_criar_uma_tarefa_seu_estado_padrao_e_nao_finalizado():\n    cliente = TestClient(app)\n    tarefa = {\"titulo\": \"titulo\", \"descricao\": \"descricao\"}\n    resposta = cliente.post(\"/tarefas\", json=tarefa)\n    assert resposta.json()[\"estado\"] == \"n\u00e3o finalizado\"\n    TAREFAS.clear()\n</code></pre> <p>Como temos apenas dois estados poss\u00edveis (finalizado, n\u00e3o finalizado) para uma tarefa, vamos utilizar uma estrutura do Python que \u00e9 bastante \u00fatil para estes momentos.</p> <p>O Enum, \u00e9 uma estrutura que define valores limitados a algo.</p> <p>Um exemplo poderia ser os estados do nosso pa\u00eds, tamanhos de roupa, cores.</p> <p>Mas por que?</p> <p>Vamos pegar como exemplo o tamanho de roupa. Inicialmente nosso sistema possuia, \"Pequena\", \"M\u00e9dia\", etc. De repente por uma quest\u00e3o de economia de espa\u00e7o, estes valores modificam para \"p\", \"m\".</p> <p>E agora? vamos ter que ir em cada lugar do sistema que utiliza os valores e realizar a substitui\u00e7\u00e3o. Mas e se eu esquecer e utilizar o antigo.</p> <p>Ent\u00e3o ao inv\u00e9s de utilizarmos ``</p> <p>Adicionamos estado a estrutura TarefaEntrada, e seu tipo \u00e9 <code>EstadosPossiveis</code>.</p> <p>Um valor padr\u00e3o ser\u00e1 <code>EstadosPossiveis.nao_finalizado</code>.</p> <p>Voc\u00ea deve estar se perguntando por que <code>EstadosPossiveis.nao_finalizado</code>e n\u00e3o a string direto. \u00c9 justamente para evitar o problema citado acima de substitui\u00e7\u00e3o.</p> <p>\u2705</p> gerenciador_tarefas/gerenciador.py<pre><code>from enum import Enum\n\n\nclass EstadosPossiveis(str, Enum):\n    finalizado = \"finalizado\"\n    nao_finalizado = \"n\u00e3o finalizado\"\n\n\nclass TarefaEntrada(BaseModel):\n    titulo: constr(min_length=3, max_length=50)\n    descricao: constr(max_length=140)\n    estado: EstadosPossiveis = EstadosPossiveis.nao_finalizado\n</code></pre> <p>Quase tudo certo, por\u00e9m o c\u00f3digo de status quando algo \u00e9 criado deve ser <code>201 Created</code>.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_quando_criar_uma_tarefa_codigo_de_status_retornado_deve_ser_201():\n    cliente = TestClient(app)\n    tarefa = {\"titulo\": \"titulo\", \"descricao\": \"descricao\"}\n    resposta = cliente.post(\"/tarefas\", json=tarefa)\n    assert resposta.status_code == status.HTTP_201_CREATED\n    TAREFAS.clear()\n</code></pre> <p>Modifique o m\u00e9todo para retornar 201 quando for bem sucedido.</p> <p>\u2705</p> gerenciador_tarefas/gerenciador.py<pre><code>from fastapi import FastAPI, status\n\n# ...\n\n@app.post('/tarefas', response_model=Tarefa, status_code=status.HTTP_201_CREATED)\n</code></pre> <p>A \u00faltima coisa \u00e9 que no momento n\u00e3o estamos guardando a nova tarefa.</p> <p>\u274c</p> tests/test_gerenciador.py<pre><code>def test_quando_criar_uma_tarefa_esta_deve_ser_persistida():\n    cliente = TestClient(app)\n    tarefa = {\"titulo\": \"titulo\", \"descricao\": \"descricao\"}\n    cliente.post(\"/tarefas\", json=tarefa)\n    assert len(TAREFAS) == 1\n    TAREFAS.clear()\n</code></pre> <p>\u2705</p> gerenciador.py<pre><code>@app.post('/tarefas', response_model=Tarefa, status_code=status.HTTP_201_CREATED)\ndef criar(tarefa: TarefaEntrada):\n    nova_tarefa = tarefa.dict()\n    nova_tarefa.update({\"id\": uuid4()})\n    TAREFAS.append(nova_tarefa)\n    return nova_tarefa\n</code></pre> <p>\ud83c\udf89  Nossos testes passaram! Agora temos as funcionalidades de cria\u00e7\u00e3o e listagem de tarefas.</p> <ul> <li> listar as tarefas</li> <li> adicionar tarefa</li> </ul> <p>No fim os testes ficam similar a:</p> tests/test_gerenciador.py<pre><code>from fastapi import status\nfrom fastapi.testclient import TestClient\n\nfrom gerencia\u00b4dor_tarefas.gerenciador import TAREFAS, app\n\n\ndef test_quando_listar_tarefas_devo_ter_como_retorno_codigo_de_status_200():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert resposta.status_code == status.HTTP_200_OK\n\n\ndef test_quando_listar_tarefas_formato_de_retorno_deve_ser_json():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert resposta.headers[\"Content-Type\"] == \"application/json\"\n\n\ndef test_quando_listar_tarefas_retorno_deve_ser_uma_lista():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert isinstance(resposta.json(), list)\n\n\ndef test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_id():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"id\" in resposta.json().pop()\n    TAREFAS.clear()\n\n\ndef test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_titulo():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"titulo\" in resposta.json().pop()\n    TAREFAS.clear()\n\n\ndef test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_descricao():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"descricao\" in resposta.json().pop()\n    TAREFAS.clear()\n\n\ndef test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_um_estado():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"estado\" in resposta.json().pop()\n    TAREFAS.clear()\n\n\ndef test_recurso_tarefas_deve_aceitar_o_verbo_post():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\")\n    assert resposta.status_code != status.HTTP_405_METHOD_NOT_ALLOWED\n\n\ndef test_quando_uma_tarefa_e_submetida_deve_possuir_um_titulo():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\", json={})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n\n\ndef test_titulo_da_tarefa_deve_conter_entre_3_e_50_caracteres():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\", json={\"titulo\": 2 * \"*\"})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n    resposta = cliente.post(\"/tarefas\", json={\"titulo\": 51 * \"*\"})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n\n\ndef test_quando_uma_tarefa_e_submetida_deve_possuir_uma_descricao():\n    cliente = TestClient(app)\n    resposta = cliente.post(\"/tarefas\", json={\"titulo\": \"titulo\"})\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n\n\ndef test_descricao_da_tarefa_pode_conter_no_maximo_140_caracteres():\n    cliente = TestClient(app)\n    resposta = cliente.post(\n        \"/tarefas\", json={\"titulo\": \"titulo\", \"descricao\": \"*\" * 141}\n    )\n    assert resposta.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY\n\n\ndef test_quando_criar_uma_tarefa_a_mesma_deve_ser_retornada():\n    cliente = TestClient(app)\n    tarefa_esperada = {\"titulo\": \"titulo\", \"descricao\": \"descricao\"}\n    resposta = cliente.post(\"/tarefas\", json=tarefa_esperada)\n    tarefa_criada = resposta.json()\n    assert tarefa_criada[\"titulo\"] == tarefa_esperada[\"titulo\"]\n    assert tarefa_criada[\"descricao\"] == tarefa_esperada[\"descricao\"]\n    TAREFAS.clear()\n\n\ndef test_quando_criar_uma_tarefa_seu_id_deve_ser_unico():\n    cliente = TestClient(app)\n    tarefa1 = {\"titulo\": \"titulo1\", \"descricao\": \"descricao1\"}\n    tarefa2 = {\"titulo\": \"titulo2\", \"descricao\": \"descricao1\"}\n    resposta1 = cliente.post(\"/tarefas\", json=tarefa1)\n    resposta2 = cliente.post(\"/tarefas\", json=tarefa2)\n    assert resposta1.json()[\"id\"] != resposta2.json()[\"id\"]\n    TAREFAS.clear()\n\n\ndef test_quando_criar_uma_tarefa_seu_estado_padrao_e_nao_finalizado():\n    cliente = TestClient(app)\n    tarefa = {\"titulo\": \"titulo\", \"descricao\": \"descricao\"}\n    resposta = cliente.post(\"/tarefas\", json=tarefa)\n    assert resposta.json()[\"estado\"] == \"n\u00e3o finalizado\"\n    TAREFAS.clear()\n\n\ndef test_quando_criar_uma_tarefa_codigo_de_status_retornado_deve_ser_201():\n    cliente = TestClient(app)\n    tarefa = {\"titulo\": \"titulo\", \"descricao\": \"descricao\"}\n    resposta = cliente.post(\"/tarefas\", json=tarefa)\n    assert resposta.status_code == status.HTTP_201_CREATED\n    TAREFAS.clear()\n\n\ndef test_quando_criar_uma_tarefa_esta_deve_ser_persistida():\n    cliente = TestClient(app)\n    tarefa = {\"titulo\": \"titulo\", \"descricao\": \"descricao\"}\n    cliente.post(\"/tarefas\", json=tarefa)\n    assert len(TAREFAS) == 1\n    TAREFAS.clear()\n</code></pre> <p>E o c\u00f3digo:</p> gerenciador_tarefas/gerenciador.py<pre><code>from enum import Enum\nfrom uuid import UUID, uuid4\n\nfrom fastapi import FastAPI, status\nfrom pydantic import BaseModel, constr\n\napp = FastAPI()\n\n\nclass EstadosPossiveis(str, Enum):\n    finalizado = \"finalizado\"\n    nao_finalizado = \"n\u00e3o finalizado\"\n\n\nclass TarefaEntrada(BaseModel):\n    titulo: constr(min_length=3, max_length=50)\n    descricao: constr(max_length=140)\n    estado: EstadosPossiveis = EstadosPossiveis.nao_finalizado\n\n\nclass Tarefa(TarefaEntrada):\n    id: UUID\n\n\nTAREFAS = []\n\n\n@app.get(\"/tarefas\")\ndef listar():\n    return TAREFAS\n\n\n@app.post(\n    \"/tarefas\", response_model=Tarefa, status_code=status.HTTP_201_CREATED\n)\ndef criar(tarefa: TarefaEntrada):\n    nova_tarefa = tarefa.dict()\n    nova_tarefa.update({\"id\": uuid4()})\n    TAREFAS.append(nova_tarefa)\n    return nova_tarefa\n</code></pre>"},{"location":"criar/#testando-manualmente","title":"\ud83d\udd27 Testando manualmente","text":"<p>Para testar nossa aplica\u00e7\u00e3o manualmente, precisamos colocar nossa aplica\u00e7\u00e3o no ar.</p> <p>Relembrando o comando para isto \u00e9 <code>uvicorn --reload gerenciador_tarefas.gerenciador:app</code>.</p> <p>Experimente adicionar algumas tarefas utilizando o <code>httpie</code>.</p> <p></p> <p><code>http localhost:8000/tarefas titulo=\"titulo\" descricao=\"uma descri\u00e7\u00e3o qualquer\"</code></p> <p>Lembrando que sempre temos a op\u00e7\u00e3o de verificar os recursos atrav\u00e9s da documenta\u00e7\u00e3o gerada automaticamente.</p> <p></p>"},{"location":"criar/#salvando-a-versao-atual-do-codigo","title":"Salvando a vers\u00e3o atual do c\u00f3digo","text":"<p>Primeiro passo \u00e9 checar o que foi feito at\u00e9 agora:</p> <pre><code>$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n        modified:   gerenciador_tarefas/gerenciador.py\n        modified:   tests/test_gerenciador.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>\ud83c\udfa8 Para garantir consist\u00eancia no estilo do nosso  c\u00f3digo, vamos rodar os nossos linters.</p> <pre><code>$ python -m isort .\n$ python -m black .\n$ python -m flake8 --exclude=.venv\n</code></pre> <p>Caso algum erro seja encontrado, ser\u00e1 necess\u00e1rio manualmente corrig\u00ed-lo.</p> <p>Vamos adicionar as altera\u00e7\u00f5es nos arquivos.</p> <pre><code>git add gerenciador_tarefas/gerenciador.py tests/test_gerenciador.py\n</code></pre> <p>\ud83d\udcbe Agora vamos marcar esta vers\u00e3o como salva.</p> <pre><code>git commit -m \"Adiciona funcionalidade de criar tarefas\"\n</code></pre> <p>\ud83d\udd27 Por fim envie ao GitHub a vers\u00e3o atualizada do projeto.</p> <pre><code>git push\n</code></pre> <p>\u2601\ufe0f E coloque no ar a nova vers\u00e3o.</p> <pre><code>git push heroku main\n</code></pre> <p>\ud83c\udf89  Bom trabalho! Vamos ent\u00e3o nos desafiar agora nos proximos pasos!</p>"},{"location":"deploy/","title":"\ud83d\ude80 Mandando um foguete para o espa\u00e7o","text":""},{"location":"deploy/#hora-do-deploy","title":"Hora do deploy","text":"<p>Neste passo iremos colocar no ar a aplica\u00e7\u00e3o utilizando a plataforma heroku.</p> <p>A heroku \u00e9 uma plataforma de nuvem como servi\u00e7o, suportando v\u00e1rias linguagens de programa\u00e7\u00e3o que \u00e9 utilizada como modelo de implementa\u00e7\u00e3o de aplicativos web.</p> <p>Em termos simples, a plataforma recebe a sua base de c\u00f3digo, identifica a linguagem de programa\u00e7\u00e3o e ferramentas utilizadas e coloca no ar sua aplica\u00e7\u00e3o, sem precisar se preocupar com configura\u00e7\u00e3o complexa de infraestrutura.</p> <p>Quando utilizamos o termo <code>deploy</code>, estamos falando da implementa\u00e7\u00e3o da nossa aplica\u00e7\u00e3o web, ou seja, colocar a nossa aplica\u00e7\u00e3o no ar.</p> <p>Primeiro passo para fazermos deploy da vers\u00e3o atual do nosso software \u00e9 se registrar na plataforma.</p> <p>\u00c9 uma plataforma gr\u00e1tis para aplicativos de pequeno porte e uma op\u00e7\u00e3o tamb\u00e9m para aplicativos maiores.</p> <p>Acesse https://signup.heroku.com/ e preencha o formul\u00e1rio.</p> <p></p> <p>Em um terminal fa\u00e7a login em sua conta rec\u00e9m criada atrav\u00e9s do comando <code>heroku login</code>.</p> <p>Crie uma aplica\u00e7\u00e3o no Heroku, preparando a heroku para receber seu c\u00f3digo-fonte.</p> <pre><code>$ heroku create\nCreating app... done, \u2b22 agile-river-58363\nhttps://agile-river-58363.herokuapp.com/ | https://git.heroku.com/agile-river-58363.git\n</code></pre> <p>Com este comando um reposit\u00f3rio remoto \u00e9 vinculado ao seu reposit\u00f3rio local e cada vez que quiser modificar a vers\u00e3o do c\u00f3digo rodando, basta enviar seu c\u00f3digo para este reposit\u00f3rio remoto. Esta a\u00e7\u00e3o desencadeia toda uma nova implementa\u00e7\u00e3o da sua aplica\u00e7\u00e3o.</p> <p>Antes de enviar pela primeira vez nosso c\u00f3digo, vamos fazer as \u00faltimas configura\u00e7\u00f5es necess\u00e1rias.</p> <p>O Heroku utiliza um arquivo chamado <code>Procfile</code> que cont\u00e9m informa\u00e7\u00f5es de como rodar sua aplica\u00e7\u00e3o. Crie este arquivo com o seguinte conte\u00fado.</p> Procfile<pre><code>web: uvicorn --host=0.0.0.0 --port=$PORT gerenciador_tarefas.gerenciador:app\n</code></pre> <p>Salve a vers\u00e3o atual da nossa aplica\u00e7\u00e3o para implanta\u00e7\u00e3o.</p> <p>Vamos conosolidar uma vers\u00e3o do nosso c\u00f3digo com instru\u00e7\u00f5es de implanta\u00e7\u00e3o (deploy).</p> <pre><code>git add Procfile\n</code></pre> <p>Salvamos a vers\u00e3o atual com os arquivos de deploy.</p> <pre><code>git commit -m \"Adiciona arquivos para implanta\u00e7\u00e3o no heroku\"`\n</code></pre> <p>Agora vamos a implanta\u00e7\u00e3o do sistema.</p> <p>\u00c9 simples como:</p> <pre><code>git push heroku main\n</code></pre> <p>A sa\u00edda abaixo ser\u00e1 exibida.</p> <pre><code>$ git push heroku main\nEnumerating objects: 5, done.\nCounting objects: 100% (5/5), done.\nDelta compression using up to 4 threads\nCompressing objects: 100% (2/2), done.\nWriting objects: 100% (3/3), 303 bytes | 303.00 KiB/s, done.\nTotal 3 (delta 1), reused 0 (delta 0)\nremote: Compressing source files... done.\nremote: Building source:\nremote:\nremote: -----&gt; Python app detected\nremote: -----&gt; Installing requirements with pip\n...\nremote:        Procfile declares types -&gt; web\nremote:\nremote: -----&gt; Compressing...\nremote:        Done: 55.6M\nremote: -----&gt; Launching...\nremote:        Released v4\nremote:        https://agile-river-58363.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\nTo https://git.heroku.com/agile-river-58363.git\n   629aed8..8710ff8  main -&gt; main\n</code></pre>"},{"location":"deploy/#deu-certo","title":"Deu certo?","text":"<p>Para verificarmos se a implanta\u00e7\u00e3o deu certo, digite <code>heroku open</code> e lembre-se que o recurso est\u00e1 em <code>/tarefas</code> ou copie a url retornada no comando de implanta\u00e7\u00e3o acrescentando <code>/tarefas</code> e utilize o httpie para testar assim como foi feito localmente.</p> <p>No nosso exemplo seria <code>http https://agile-river-58363.herokuapp.com/tarefas</code>.</p> <p>Verifique se uma resposta 200 OK foi obtida.</p> <p>\ud83d\ude05 Acabou, \u00e9 isso pessoal! J\u00e1 temos uma aplica\u00e7\u00e3o no ar e podemos ir embora.</p> <p>Brincadeira, foi legal ter a nossa primeira vers\u00e3o da aplica\u00e7\u00e3o no ar, mas agora precisamos evolu\u00ed-la.</p>"},{"location":"desafio/","title":"\ud83c\udfc6 O desafio","text":"<p>\u00c0 partir de agora, o seu desafio \u00e9 continuar escrevendo as funcionalidades que faltam, mas vou te dar umas dicas.</p> <p>Relembrando, ainda temos as seguintes tarefas a serem feitas.</p> <ul> <li> listar as tarefas</li> <li> adicionar tarefa</li> <li> remover tarefa</li> <li> ordenar a listagem por estado</li> <li> finalizar uma tarefa</li> <li> exibir uma tarefa de forma detalhada</li> </ul>"},{"location":"desafio/#remover-tarefas","title":"\u274c Remover tarefas","text":"<p>A remo\u00e7\u00e3o de tarefas consiste em buscar uma tarefa e em seguida remove-la.</p> <p>O m\u00e9todo utilizado \u00e9 o <code>DELETE</code>.</p> <p>O c\u00f3digo de status retornado mais comum \u00e9 o <code>204 No Content</code>.</p> <p>Voc\u00ea deve especificar o id da tarefa a ser removida na url <code>/tarefas/86d92774-281c-4e5a-87f2-69029177bfd2</code>.</p> <p>Caso n\u00e3o encontra uma tarefa, o c\u00f3digo de status <code>404 Not Found</code> deve ser retornado.</p> <p>Tip</p> <p>Para n\u00e3o retornar conte\u00fado no corpo da resposta, utilize `Response(status_code=status.HTTP_204_NO_CONTENT).</p>"},{"location":"desafio/#ordenar-a-listagem-por-estado","title":"\ud83d\udcd7 Ordenar a listagem por estado","text":"<p>J\u00e1 temos a listagem pronta mas n\u00e3o garantimos que sua ordena\u00e7\u00e3o est\u00e1 correta.</p> <p>Um teste que pode ser escrito aqui \u00e9 adi\u00e7\u00e3o de duas tarefas, sendo a primeira finalizada e a segunda n\u00e3o finalizada.</p> <p>A exibi\u00e7\u00e3o da listagem de tarefas deve apresentar a segunda primeiro. Para fazer esta checagem, verifique a resposta e a ordem das tarefas retornadas.</p> <p>A fun\u00e7\u00e3o <code>sorted</code> pode ser seu aliado para resolver este problema.</p> <p>Outra fun\u00e7\u00e3o bastante \u00fatil \u00e9 a <code>itemgetter</code> que pode ser utilizada no par\u00e2metro <code>key</code> da fun\u00e7\u00e3o sorted.</p> <p>Uma altera\u00e7\u00e3o que pode ser feita na listagem \u00e9 utiliza\u00e7\u00e3o de <code>list[Tarefa]</code> como modelo de resposta( par\u00e2metro response_model no decorador), esta mudan\u00e7a ajuda a melhorar a documenta\u00e7\u00e3o autogerada.</p> <p>Warning</p> <p><code>itemgetter</code> pode ser obtido atrav\u00e9s do pacote operator.<code>from operator import itemgetter</code></p>"},{"location":"desafio/#finalizar-uma-tarefa","title":"\u2611\ufe0f Finalizar uma tarefa","text":"<p>Finalizar uma tarefa, pode ser representado atrav\u00e9s do m\u00e9todo <code>PUT</code> ou <code>PATCH</code>, modificando o valor de estado de uma tarefa.</p> <p>Devemos procurar uma tarefa e caso n\u00e3o seja encontrada, o c\u00f3digo de status <code>404 Not Found</code> deve ser retornado.</p> <p>Os campos a serem modificados podem ser inv\u00e1lidos, caso isto ocorra everemos avisar ao cliente o seu erro. O c\u00f3digo de status <code>422 Unprocessable Entity</code> pode ser utilizado aqui.</p> <p>Se bem sucedido o c\u00f3digo de status <code>200 OK</code> deve ser retornado e o corpo da resposta deve conter a tarefa com o valor j\u00e1 modificado.</p> <p>Voc\u00ea deve especificar o id da tarefa a ser removida na url <code>/tarefas/86d92774-281c-4e5a-87f2-69029177bfd2</code>.</p>"},{"location":"desafio/#detalhando-tarefas","title":"\ud83d\udcdc Detalhando tarefas","text":"<p>Detalhar uma tarefa \u00e9 busca-la na lista de tarefas e exibir seu valor.</p> <p>Caso a tarefa n\u00e3o seja encontrada o c\u00f3digo de status <code>404 Not Found</code> deve ser retornado.</p> <p>Voc\u00ea deve especificar o id da tarefa a ser removida na url <code>/tarefas/86d92774-281c-4e5a-87f2-69029177bfd2</code>.</p> <p>O c\u00f3digo de status retornado quando bem sucedido \u00e9 <code>200 OK</code>.</p>"},{"location":"desafio/#concluindo","title":"\ud83c\udfc1 Concluindo","text":"<p>Assim finalizamos este guia, espero que tenha curtido bastante esta jornada de aprendizado.</p> <p>Ainda temos v\u00e1rias coisas n\u00e3o abordadas neste guia que complementam nossa aplica\u00e7\u00e3o, mas que tornariam a did\u00e1tica pior.</p> <p>Caso tenha gostado, n\u00e3o deixe de estrelar o reposit\u00f3rio como forma de gratid\u00e3o. Isto motiva a escrever mais materiais interessantes como este em portugu\u00eas.</p>"},{"location":"ferramentas/","title":"\ud83d\udd28 Escolhendo as melhores ferramentas","text":""},{"location":"ferramentas/#um-bom-chef-escolhe-as-melhores-ferramentas","title":"\ud83c\udf74 Um bom chef escolhe as melhores ferramentas","text":"<p>Uma analogia que normalmente fa\u00e7o \u00e9 que programar \u00e9 igual a cozinhar, voc\u00ea deve escolher as melhores ferramentas. Um bom chefe gasta algumas horas escolhendo quais acess\u00f3rios ser\u00e3o necess\u00e1rios para a produ\u00e7\u00e3o do prato e j\u00e1 deixa na bancada de forma que n\u00e3o precise ficar procurando enquanto est\u00e1 produzindo seu prato.</p> <p>Na programa\u00e7\u00e3o tamb\u00e9m \u00e9 assim, escolhemos as ferramentas necess\u00e1rias para desenvolver, testar e colocar no ar nosso sistema.</p> <p>Para este curso foram escolhidas algumas ferramentas e a partir de agora iremos ver como instal\u00e1-las e configur\u00e1-las para que daqui pra frente n\u00e3o tenhamos que parar para fazer instala\u00e7\u00e3o de mais uma ferramenta.</p> <p>As ferramentas foram escolhidas pensando na did\u00e1tica do aluno assim como compatibilidade de sistemas operacionais e tamb\u00e9m por serem as principais escolhas no mercado de trabalho.</p> <p>Siga os passos de acordo com o seu sistema operacional para cada ferramenta. Tenha sempre certeza de que a ferramenta est\u00e1 instalada e funcionando.</p>"},{"location":"ferramentas/#git","title":"\ud83d\udd27 Git","text":"<p>O que \u00e9?</p> <p>Git \u00e9 uma ferramenta para controle de vers\u00e3o livre e de c\u00f3digo aberto, constru\u00eddo para lidar com projetos pequenos e grandes de maneira r\u00e1pida e eficiente.</p> <p>Para que serve?</p> <p>Com certeza voc\u00ea j\u00e1 escreveu um arquivo, mais tarde troca algumas coisas e salva como final. Mais tarde ou no outro dia voc\u00ea decide fazer mais mudan\u00e7as e chama de \"agoravai\" e quando menos percebe j\u00e1 tem um monte de arquivos e talvez nem se lembre mais qual a \u00faltima vers\u00e3o.</p> <p>\u00c9 para gerenciar altera\u00e7\u00f5es feitas no projeto durante o tempo que serve esta ferramenta. Durante o curso vamos salvando cada progresso feito sem precisar de ter v\u00e1rias c\u00f3pias do mesmo arquivo.</p> <p>Como instalar</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>O pacote git se encontra na central de programas.</p> <p><code>sudo apt install git</code></p> <p>Baixe a \u00faltima vers\u00e3o neste site. Deixe as op\u00e7\u00f5es j\u00e1 marcadas por padr\u00e3o, exceto a mostrada abaixo que deve ser ajustada.</p> <p></p> <p>O pacote git faz parte do kit de desenvolvimento Xcode. Para instalar, basta tentar usar o comando pela primeira vez. Opcionalmente, voc\u00ea pode entrar na App Store e procurar por Xcode.</p> <p><code>git --help</code></p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Abra um terminal e digite <code>git --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ git --version\ngit version 2.36.1\n</code></pre> <p>Clique no bot\u00e3o iniciar, busque por <code>powershell</code> e abra o programa <code>Windows PowerShell</code>. Agora digite <code>git --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ git --version\ngit version 2.38.0.windows.1\n</code></pre> <p>Abra um terminal e digite <code>git --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ git --version\ngit version 2.36.1\n</code></pre>"},{"location":"ferramentas/#python","title":"\ud83d\udc0d Python","text":"<p>O que \u00e9?</p> <p>Python \u00e9 uma linguagem de programa\u00e7\u00e3o com foco em legibilidade e produtividade, criada para escrever c\u00f3digo bom e f\u00e1cil de manter de maneira r\u00e1pida.</p> <p>Para que serve?</p> <p>\u00c9 uma linguagem bastante vers\u00e1til, e hoje em dia \u00e9 amplamente utilizada para escrever sistemas web, integra\u00e7\u00f5es entre sistemas, automatizar tarefas e muitas outras coisas.</p> <p>Como instalar</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Vers\u00f5es mais atuais do ubuntu j\u00e1 vem com o python 3 instalado, e inclusive, a partir da vers\u00e3o 17.10, essa passa a ser a vers\u00e3o padr\u00e3o do sistema.</p> <p>Caso python 3 n\u00e3o esteja instalado, utilize <code>sudo apt install python3</code>.</p> <p>Baixe o instalador de acordo com o seu computador caso seja 64 bits ou 32 bits.</p> <p>Ap\u00f3s baixar o instalador fique atento para selecionar a op\u00e7\u00e3o marcada na figura abaixo.</p> <p></p> <p>Para continuar a intala\u00e7\u00e3o clique em \"Install Now\".</p> <p>Assim como o Ubuntu (e outros sistemas Unix e \"Unix-Like\")o Mac OS tamb\u00e9m j\u00e1 vem com uma vers\u00e3o no Python instalada. Por\u00e9m, a vers\u00e3o dispon\u00edvel por padr\u00e3o no sistema est\u00e1 sempre muito defasada em reala\u00e7\u00e3o a \u00faltima vers\u00e3o est\u00e1vel dispon\u00edvel. Por exemplo, na data atual a vers\u00e3o 3.8 j\u00e1 foi lan\u00e7ada para o p\u00fablico, por\u00e9m o sistema ainda utiliza a vers\u00e3o 2.7. Para instalar a vers\u00e3o mais atual, a maneira convencional \u00e9 utilizar o gerenciador de pacotes Homebrew. Clique no link e veja como instal\u00e1-lo com um simples comando! Com ele instalado, basta utilizar o comando: <code>brew install python</code> no seu terminal.</p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Abra um terminal e digite <code>python3 --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ python3 --version\nPython 3.10.4\n</code></pre> <p>Clique no bot\u00e3o iniciar, busque por <code>powershell</code> e abra o programa <code>Windows PowerShell</code>. Agora digite <code>python --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ python --version\nPython 3.10.7\n</code></pre> <p>Abra um terminal e digite <code>python3 --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ python3 --version\nPython 3.10.4\n</code></pre> <p>Warning</p> <p>A vers\u00e3o necess\u00e1ria neste curso \u00e9 superior a 3.7 devido aos recursos que utilizaremos.</p>"},{"location":"ferramentas/#pip","title":"\ud83d\ude9a Pip","text":"<p>O que \u00e9?</p> <p>Pip \u00e9 o gerenciador de pacotes do python. \u00c9 um cliente de linha de comandos utilizado para controle das dep\u00eandencias do projeto.</p> <p>Para que serve?</p> <p>Utilizaremos o pip para controlar as vers\u00f5es das bibliotecas utilizadas para desenvolvimento do sistema. O pip nos permite baixar uma vers\u00e3o espec\u00edfica de uma biblioteca como por exemplo <code>python3 -m pip install fastapi==0.43.0</code>.</p> <p>Como instalar</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Esta ferramenta n\u00e3o vem por padr\u00e3o no sistema operacional ubuntu e pode ser instalada utilizando o comando <code>sudo apt install python3-pip</code>.</p> <p>N\u00e3o ser\u00e1 necess\u00e1rio a instala\u00e7\u00e3o pois o mesmo j\u00e1 vem com o instalador da linguagem.</p> <p>Se voc\u00ea instalou o Python utilizando o Homebrew, o pip j\u00e1 foi instalado em seu sistema.</p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Abra um terminal e digite <code>python3 -m pip --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ python3 -m pip --version\npip 22.0.4 from /usr/lib/python3.10/site-packages (python 3.10)\n</code></pre> <p>Clique no bot\u00e3o iniciar, busque por <code>powershell</code> e abra o programa <code>Windows PowerShell</code>. Agora digite <code>python -m pip --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ python -m pip --version\npip 22.2.2 from C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\pip (python 3.10)\n</code></pre> <p>Abra um terminal e digite <code>python3 -m pip --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ python3 -m pip --version\npip 22.0.4 from /usr/lib/python3.10/site-packages (python 3.10)\n</code></pre>"},{"location":"ferramentas/#venv","title":"\ud83d\udcda venv","text":"<p>O que \u00e9?</p> <p>Respons\u00e1vel por criar ambientes virtuais Python e prov\u00ea um isolamento dos pacotes instalados e suas respectivas vers\u00f5es.</p> <p>\u00c9 um cliente de linha de comando que auxilia na separa\u00e7\u00e3o de ambientes para diferentes projetos.</p> <p>Para que serve?</p> <p>Iniciamos um projeto que tem uma biblioteca na vers\u00e3o <code>1.4</code>, e de repente, um novo projeto \u00e9 iniciado na vers\u00e3o <code>2.0</code>. O que fazer? Ser\u00e1 que s\u00e3o compat\u00edveis? E se eu atualizo o sistema e a vers\u00e3o antiga para de funcionar?</p> <p>\u00c9 onde o venv entra, ele serve para isolar ambientes entre projetos, ou seja, eu consigo ter dois projetos rodando, em dois ambientes diferentes, com vers\u00f5es diferentes da mesma biblioteca.</p> <p>Como instalar</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Vers\u00f5es atuais do ubuntu j\u00e1 vem com python 3 instalado. Para as mais antigas utilize o comando <code>sudo apt install python3-venv</code>.</p> <p>N\u00e3o ser\u00e1 necess\u00e1rio a instala\u00e7\u00e3o pois o mesmo j\u00e1 vem com o instalador da linguagem.</p> <p>Normalmente o venv \u00e9 instalado junto com o Python e com o pip ao utilizar o Homebrew. Se o comando de verifica\u00e7\u00e3o (logo abaixo) n\u00e3o funcionar, voc\u00ea pode instal\u00e1-lo utilizando o pr\u00f3prio pip com o comando <code>pip install virtualenv</code></p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Abra um terminal e digite <code>python3 -m venv -h</code>.</p> <p>Clique no bot\u00e3o iniciar, busque por <code>powershell</code> e abra o programa <code>Windows PowerShell</code>. Agora digite <code>python -m venv -h</code>.</p> <p>Abra um terminal e digite <code>python3 -m venv -h</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ python -m venv -h\nusage: venv [-h] [--system-site-packages] [--symlinks | --copies] [--clear] [--upgrade] [--without-pip]\n            [--prompt PROMPT] [--upgrade-deps]\n            ENV_DIR [ENV_DIR ...]\n\nCreates virtual Python environments in one or more target directories.\n\npositional arguments:\n  ENV_DIR               A directory to create the environment in.\n\noptions:\n  -h, --help            show this help message and exit\n  --system-site-packages\n                        Give the virtual environment access to the system site-packages dir.\n  --symlinks            Try to use symlinks rather than copies, when symlinks are not the default for the platform.\n  --copies              Try to use copies rather than symlinks, even when symlinks are the default for the platform.\n  --clear               Delete the contents of the environment directory if it already exists, before environment\n                        creation.\n  --upgrade             Upgrade the environment directory to use this version of Python, assuming Python has been\n                        upgraded in-place.\n  --without-pip         Skips installing or upgrading pip in the virtual environment (pip is bootstrapped by default)\n  --prompt PROMPT       Provides an alternative prompt prefix for this environment.\n  --upgrade-deps        Upgrade core dependencies: pip setuptools to the latest version in PyPI\n\nOnce an environment has been created, you may wish to activate it, e.g. by sourcing an activate script in its bin\ndirectory.\n</code></pre>"},{"location":"ferramentas/#heroku-cli","title":"\u2601\ufe0f Heroku CLI","text":"<p>O que \u00e9?</p> <p>O Heroku \u00e9 uma plataforma em nuvem como um servi\u00e7o (PaaS) que suporta v\u00e1rias linguagens de programa\u00e7\u00e3o usadas como um modelo de implanta\u00e7\u00e3o de aplicativos da Web.</p> <p>A CLI \u00e9 uma interface de linha de comando que serve para facilitar a cria\u00e7\u00e3o e o gerenciamento de aplicativos direto do terminal.</p> <p>Para que serve?</p> <p>Vamos utilizar o heroku para colocar nossa aplica\u00e7\u00e3o no ar e se tudo der certo, automatizar este processo. O CLI vai ajudar a fazer isto atrav\u00e9s do terminal.</p> <p>Como instalar</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Abra um terminal e digite <code>wget -qO- https://cli-assets.heroku.com/install-ubuntu.sh | sh</code>.</p> <p>V\u00e1 no site de download do heroku e baixe o instalador.</p> <p></p> <p>Abra um terminal e digite <code>brew tap heroku/brew &amp;&amp; brew install heroku</code>.</p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udc27 Ubuntu\ud83d\udda5\ufe0f Windows\ud83c\udf4e Mac <p>Abra um terminal e digite <code>heroku --version</code>.</p> <p>Clique no bot\u00e3o iniciar, busque por <code>powershell</code> e abra o programa <code>Windows PowerShell</code>. Agora digite <code>heroku --version</code>.</p> <p>Abra um terminal e digite <code>heroku --version</code>.</p> <p>A sa\u00edda dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ heroku --version\nheroku/7.60.2 linux-x64 node-v18.0.0\n</code></pre>"},{"location":"ferramentas/#vs-code","title":"\u2328\ufe0f VS Code","text":"<p>O que \u00e9?</p> <p>O VSCode \u00e9 um editor de texto e possui uma excelente extens\u00e3o para Python que pode ser instalada atrav\u00e9s da marketplace.</p> <p>Para que serve?</p> <p>O plugin de Python para VSCode fornece auto-complete , integra\u00e7\u00e3o com os linters mais conhecidos, tamb\u00e9m \u00e9 uma ferramenta para depura\u00e7\u00e3o de c\u00f3digo.</p> <p>Como instalar</p> <p>O VS Code pode ser baixado no site oficial aqui.</p> <p>A instala\u00e7\u00e3o do _ plugin_ de Python pode ser feita atrav\u00e9s da marketplace ou atrav\u00e9s dos comandos abaixo:</p> <p>Abra o VS Code Quick Open (Ctrl+P) , cole o comando a seguir e pressione enter .</p> <pre><code>ext install ms-python.python\n</code></pre> <p>Vamos verificar se deu tudo certo?</p> <p>Voc\u00ea pode abrir o VS Code e verificar se o plugin foi instalado com sucesso.</p> <p>Basta clicar no ribbon \"Extensions\" ao lado esquerdo da tela, e verificar se a extens\u00e3o consta listada.</p>"},{"location":"ferramentas/#parabens","title":"\ud83c\udf89 Parab\u00e9ns!","text":"<p>Instalamos todas as ferramentas que precisaremos para acompanhar este curso, vamos para o pr\u00f3ximo passo!</p>"},{"location":"hello_fastapi/","title":"\u26a1 Hello FastAPI","text":"<p>\u00c9 chegada a t\u00e3o esperada hora de escrevermos c\u00f3digo, por\u00e9m, como aprendemos que podemos ser guiados por testes para ajudar a concep\u00e7\u00e3o da arquitetura do nosso programa, faremos as coisas um pouco diferente.</p> <p>Utilizaremos os ciclos do TDD para nos auxiliarem e assim garantiremos uma qualidade de c\u00f3digo ao final.</p> <p>Est\u00e3o lembrados o que \u00e9 a nossa aplica\u00e7\u00e3o? Caso n\u00e3o se recorde leia as regras de neg\u00f3cio novamente.</p> <p>Vamos dividir algumas tarefas ent\u00e3o, na nossa lista de funcionalidades:</p> <ul> <li> listar as tarefas</li> <li> adicionar tarefa</li> <li> remover tarefa</li> <li> ordenar a listagem por estado</li> <li> finalizar uma tarefa</li> <li> exibir uma tarefa de forma detalhada</li> </ul> <p>Acho que para iniciarmos o mais simples de escrever e testar \u00e9 a funcionalidade de listagem de tarefas.</p> <p>Mas como fazer isto se n\u00e3o temos tarefas, nem mesmo uma aplica\u00e7\u00e3o ainda? Por onde come\u00e7o?</p> <p>Inicie criando um diret\u00f3rio com o nome <code>tests</code>, onde colocaremos os testes do nosso programa.</p> <p>L\u00e1 dentro, crie um arquivo com nome <code>test_gerenciador.py</code> e tamb\u00e9m um arquivo <code>__init__.py</code>.</p> <p>O segundo arquivo, <code>__init__.py</code>, faz com que o Python trate o diret\u00f3rio como um pacote. Em casos simples, como o nosso, ele estar\u00e1 vazio.</p> <p>No final, teremos algo bem parecido com o seguinte:</p> <pre><code>.\n\u251c\u2500\u2500 dev-requirements.txt\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 test_gerenciador.py\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>Agora vamos escrever nosso primeiro teste!</p> <p>Nossa listagem de tarefas, se bem sucedida, deve retornar o c\u00f3digo de status <code>200 OK</code> e este ser\u00e1 nosso primeiro teste.</p> <p>Traduzindo em um teste automatizado que deve ser acrescentado ao arquivo test_gerenciador.py.</p> tests/test_gerenciador.py<pre><code>from fastapi.testclient import TestClient\nfrom fastapi import status\nfrom gerenciador_tarefas.gerenciador import app\n\n\ndef test_quando_listar_tarefas_devo_ter_como_retorno_codigo_de_status_200():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert resposta.status_code == status.HTTP_200_OK\n</code></pre> <p>Vamos rodar pela primeira vez os testes no nosso projeto.</p> <p><code>python -m pytest</code></p> <p>\ud83d\ude31 Nossa! Ocorreu um erro!</p> <pre><code>$ python -m pytest\n========================================================= test session starts =========================================================\nplatform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0\nrootdir: /home/cassiobotaro/Projects/gerenciador-tarefas\nplugins: anyio-3.6.1\ncollected 0 items / 1 error\n\n=============================================================== ERRORS ================================================================\n_____________________________________________ ERROR collecting tests/test_gerenciador.py ______________________________________________\nImportError while importing test module '/home/cassiobotaro/Projects/gerenciador-tarefas/tests/test_gerenciador.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n../../.asdf/installs/python/3.10.4/lib/python3.10/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\ntests/test_gerenciador.py:3: in &lt;module&gt;\n    from gerenciador_tarefas.gerenciador import app\nE   ModuleNotFoundError: No module named 'gerenciador_tarefas.gerenciador'\n======================================================= short test summary info =======================================================\nERROR tests/test_gerenciador.py\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n========================================================== 1 error in 0.30s ===========================================================\n</code></pre> <p>N\u00e3o se desespere, \u00e9 que temos um teste, mas ainda n\u00e3o come\u00e7amos a escrever c\u00f3digo da nossa aplica\u00e7\u00e3o.</p> <p>A primeira coisa que precisamos fazer \u00e9 criar um  diret\u00f3rio onde colocaremos nossos c\u00f3digos. vamos chama-lo de <code>gerenciador_tarefas</code>.</p> <p>Dentro dele criamos dois novos arquivos: <code>gerenciador.py</code> e <code>__init__.py</code>. O primeiro, <code>gerenciador.py</code>, \u00e9 o nosso arquivo principal, onde iremos escrever o c\u00f3digo da nossa aplica\u00e7\u00e3o.</p> <p>O segundo, assim como no diret\u00f3rio de teste, \u00e9 para garantir que este diret\u00f3rio \u00e9 um pacote e permanecer\u00e1 vazio.</p> <pre><code>.\n\u251c\u2500\u2500 dev-requirements.txt\n\u251c\u2500\u2500 gerenciador_tarefas\n\u2502   \u251c\u2500\u2500 gerenciador.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 test_gerenciador.py\n    \u2514\u2500\u2500 __init__.py\n</code></pre> <p>O conte\u00fado desse arquivo ser\u00e1 o seguinte.</p> gerenciador_tarefas/gerenciador.py<pre><code>from fastapi import FastAPI\n\n\napp = FastAPI()\n</code></pre> <p>Isto \u00e9 uma maneira de fazer os testes conhecerem o c\u00f3digo da nossa aplica\u00e7\u00e3o. Toda vez que precisamos de um trecho de c\u00f3digo em outro arquivo devemos fazer a \"importa\u00e7\u00e3o\" daquele trecho utilizando o comando import.</p> <p>Neste caso estamos requisitando a aplica\u00e7\u00e3o nos arquivos de testes automatizados, para escrevermos os testes necess\u00e1rios.</p> <p>Rode novamente os testes.</p> <p><code>python -m pytest</code></p> <p>\u274c Os testes continuam falhando!</p> <pre><code># ...\n&gt;       assert resposta.status_code == status.HTTP_200_OK\nE       assert 404 == 200\nE        +  where 404 = &lt;Response [404]&gt;.status_code\nE        +  and   200 = status.HTTP_200_OK\n# ...\n</code></pre> <p>O teste est\u00e1 dizendo que esper\u00e1mos um c\u00f3digo de status de sucesso, por\u00e9m o recurso (<code>tarefas</code>) n\u00e3o foi encontrado, por isso o c\u00f3digo 404.</p> <p>Agora temos nossa aplica\u00e7\u00e3o, mas nosso recurso de tarefas ainda n\u00e3o foi criado.</p> <p>No arquivo <code>gerenciador.py</code> adicione a seguinte fun\u00e7\u00e3o.</p> gerenciador_tarefas/gerenciador.py<pre><code>@app.get(\"/tarefas\")\ndef listar():\n    return \"\"\n</code></pre> <p>Rode novamente os testes.</p> <p><code>python -m pytest</code></p> <pre><code>$ python -m pytest\n========================================================= test session starts =========================================================\nplatform linux -- Python 3.10.4, pytest-7.1.2, pluggy-1.0.0\nrootdir: /home/cassiobotaro/Projects/gerenciador-tarefas\nplugins: anyio-3.6.1\ncollected 1 item\n\ntests/test_gerenciador.py .                                                                                                     [100%]\n\n========================================================== 1 passed in 0.23s ==========================================================\n</code></pre> <p>\u2705 Legal! Temos um teste funcionando! Nossa aplica\u00e7\u00e3o est\u00e1 retornando status 200 OK, ainda que a funcionalidade completa n\u00e3o esteja pronta.</p> <p>\ud83d\udc76 Damos o nome de <code>baby step</code>, esta maneira de construir uma aplica\u00e7\u00e3o dando pequenos passos de cada vez.</p> <p>Nosso recurso deve ter o formato json, que \u00e9 um formato textual estruturado, bem simples e leve para troca de informa\u00e7\u00f5es.</p> <p>Mas como checamos isto?</p> <p>Vamos escrever um novo teste!</p> <p>No arquivo <code>test_gerenciador.py</code>, adicione o seguinte teste.</p> tests/test_gerenciador.py<pre><code>def test_quando_listar_tarefas_formato_de_retorno_deve_ser_json():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert resposta.headers[\"Content-Type\"] == \"application/json\"\n</code></pre> <p>Rode os testes novamente. Caso esque\u00e7a o comando, volte um pouco atr\u00e1s e copie.</p> <p>Uai? O novo teste est\u00e1 passando ?!?!</p> <p>Acontece que por padr\u00e3o, o fastapi j\u00e1 define que o formato ser\u00e1 \"json\".</p> <p>Normalmente, queremos que testes falhem, por\u00e9m este teste pode ser \u00fatil como documenta\u00e7\u00e3o do seu recurso.</p> <p>Vamos deixa-lo e vamos seguir em frente, mas agora tentando escrever um teste que realmente falhe.</p> <p>Quando listar tarefas o retorno deve possuir o formato de lista. Transformando isto em c\u00f3digo temos:</p> tests/test_gerenciador.py<pre><code>def test_quando_listar_tarefas_retorno_deve_ser_uma_lista():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert isinstance(resposta.json(), list)\n</code></pre> <p>E vamos continuar o nosso ciclo e rodar os testes.</p> <p>\u274c O teste falha e isto \u00e9 bom!</p> <p>Acontece que nosso retorno n\u00e3o \u00e9 uma lista. Mas como corrigir isto?</p> <p>Se temos um teste que falha, precisamos escrever o c\u00f3digo necess\u00e1rio para este teste passar.</p> <p>Vamos voltar ao nosso gerenciador.py para corrigir o nosso problema. Na fun\u00e7\u00e3o que exp\u00f5e o nosso recurso, modifique o c\u00f3digo para:</p> gerenciador_tarefas/gerenciador.py<pre><code>@app.get(\"/tarefas\")\ndef listar():\n    return []\n</code></pre> <p>Corrigido o c\u00f3digo, rode novamente os testes.</p> <p>\u2705 Aew! Testes est\u00e3o passando novamente!</p> <p>Neste passo os arquivos devem estar da seguinte maneira.</p> tests/test_gerenciador.py<pre><code>from fastapi.testclient import TestClient\nfrom fastapi import status\nfrom gerenciador_tarefas.gerenciador import app\n\n\ndef test_quando_listar_tarefas_devo_ter_como_retorno_codigo_de_status_200():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert resposta.status_code == status.HTTP_200_OK\n\n\ndef test_quando_listar_tarefas_formato_de_retorno_deve_ser_json():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert resposta.headers[\"Content-Type\"] == \"application/json\"\n\n\ndef test_quando_listar_tarefas_retorno_deve_ser_uma_lista():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert isinstance(resposta.json(), list)\n</code></pre> gerenciador_tarefas/gerenciador.py<pre><code>from fastapi import FastAPI\n\n\napp = FastAPI()\n\n\n@app.get(\"/tarefas\")\ndef listar():\n    return []\n</code></pre> <p>Repare que pouco a pouco nossa aplica\u00e7\u00e3o vai tomando forma a partir dos testes.</p> <p>Parece chato ter de ficar rodando os testes a cada vez, mas al\u00e9m de garatir a qualidade do c\u00f3digo, cada vez que os testes s\u00e3o rodados, todas as funcionalidades testadas anteriormente s\u00e3o verificadas novamente. Assim voc\u00ea evita ter de lembrar todas as possibilidades a serem testadas em um teste manual.</p> <p>\ud83d\udea6 Perceberam que estamos guiando o nosso desenvolvimento a partir dos testes? Pouco a pouco temos a funcionalidade de listagem sendo desenhada.</p> <p>Vamos continuar ent\u00e3o. Sabemos que quando n\u00e3o h\u00e1 tarefas, nossa resposta do recurso deve ser uma lista vazia.</p> <p>Mas e quando a lista de tarefas possuir conte\u00fado? Qual o retorno esperado?</p> <p>Vamos criar uma lista de tarefas, adicionaremos conte\u00fado a ela e este conte\u00fado deve ser retornado.</p> <p>Para fazermos esta checagem, vamos pegar uma tarefa da lista e verificar os seus campos.</p> <p>O teste automatizado para isto pode ser escrito da seguinte maneira.</p> tests/test_gerenciador.py<pre><code>def test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_id():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"id\" in resposta.json().pop()\n    TAREFAS.clear()\n</code></pre> <p>\u274c Rodou os testes? Pois \u00e9, est\u00e3o quebrando novamente pois TAREFAS n\u00e3o foi definido.</p> <p>Vamos l\u00e1 no arquivo <code>gerenciador.py</code> e defini-lo.</p> gerenciador_tarefas/gerenciador.py<pre><code># ...\nTAREFAS = []\n# ...\n</code></pre> <p>Info</p> <p>N\u00e3o esque\u00e7a de ir no arquivo de testes e importar TAREFAS do gerenciador</p> <p><code>from gerenciador_tarefas.gerenciador import app, TAREFAS</code></p> <p>\u274c Os testes ainda est\u00e3o quebrando?</p> <p>Sim, mas agora o erro \u00e9 outro. O erro mostrado \u00e9 <code>IndexError: pop from empty list</code>, e isto ocorre porque l\u00e1 no gerenciador ainda estamos retornando uma lista vazia e n\u00e3o a lista de tarefas.</p> <p>Vamos modificar isto como abaixo:</p> gerenciador_tarefas/gerenciador.py<pre><code>@app.get(\"/tarefas\")\ndef listar():\n    return TAREFAS\n</code></pre> <p>Repita este processo para cada um dos campos de uma tarefa, ent\u00e3o teremos que verificar titulo, descri\u00e7\u00e3o e o estado da tarefa.</p> <p>No fim nos testes ficam:</p> tests/test_gerenciador.py<pre><code>from fastapi.testclient import TestClient\nfrom fastapi import status\nfrom gerenciador_tarefas.gerenciador import app, TAREFAS\n\n\ndef test_quando_listar_tarefas_devo_ter_como_retorno_codigo_de_status_200():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert resposta.status_code == status.HTTP_200_OK\n\n\ndef test_quando_listar_tarefas_formato_de_retorno_deve_ser_json():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert resposta.headers[\"Content-Type\"] == \"application/json\"\n\n\ndef test_quando_listar_tarefas_retorno_deve_ser_uma_lista():\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert isinstance(resposta.json(), list)\n\n\ndef test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_id():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"id\" in resposta.json().pop()\n    TAREFAS.clear()\n\n\ndef test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_titulo():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"titulo\" in resposta.json().pop()\n    TAREFAS.clear()\n\n\ndef test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_descricao():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"descricao\" in resposta.json().pop()\n    TAREFAS.clear()\n\n\ndef test_quando_listar_tarefas_a_tarefa_retornada_deve_possuir_um_estado():\n    TAREFAS.append(\n        {\n            \"id\": \"3fa85f64-5717-4562-b3fc-2c963f66afa6\",\n            \"titulo\": \"titulo 1\",\n            \"descricao\": \"descricao 1\",\n            \"estado\": \"finalizado\",\n        }\n    )\n    cliente = TestClient(app)\n    resposta = cliente.get(\"/tarefas\")\n    assert \"estado\" in resposta.json().pop()\n    TAREFAS.clear()\n</code></pre> <p>E nosso c\u00f3digo:</p> gerenciador_tarefas/gerenciador.py<pre><code>from fastapi import FastAPI\n\n\napp = FastAPI()\n\nTAREFAS = []\n\n\n@app.get(\"/tarefas\")\ndef listar():\n    return TAREFAS\n</code></pre> <p>\u2705 Os testes est\u00e3o funcionando? Parab\u00e9ns! \ud83d\udc4f \ud83d\udc4f \ud83d\udc4f</p>"},{"location":"hello_fastapi/#testando-manualmente","title":"\ud83d\udd27 Testando manualmente","text":"<p>Para testar nossa aplica\u00e7\u00e3o manualmente, precisamos colocar nossa aplica\u00e7\u00e3o no ar.</p> <p>O comando para isto \u00e9 <code>uvicorn --reload gerenciador_tarefas.gerenciador:app</code>.</p> <p>Voil\u00e0, sua aplica\u00e7\u00e3o est\u00e1 no ar. Clique aqui para abrir no navegador.</p> <p></p> <p>Como adicionamos a op\u00e7\u00e3o <code>--reload</code>, cada vez que modificamos o c\u00f3digo, o resultado \u00e9 modificado tamb\u00e9m, sem precisar desligar e rodar de novo a aplica\u00e7\u00e3o.</p> <p>Experimente adicionar tarefas na lista.</p> <pre><code>TAREFAS = [\n    {\n        \"id\": \"1\",\n        \"titulo\": \"fazer compras\",\n        \"descri\u00e7\u00e3o\": \"comprar leite e ovos\",\n        \"estado\": \"n\u00e3o finalizado\",\n    },\n    {\n        \"id\": \"2\",\n        \"titulo\": \"levar o cachorro para tosar\",\n        \"descri\u00e7\u00e3o\": \"est\u00e1 muito peludo\",\n        \"estado\": \"n\u00e3o finalizado\",\n    },\n    {\n        \"id\": \"3\",\n        \"titulo\": \"lavar roupas\",\n        \"descri\u00e7\u00e3o\": \"est\u00e3o sujas\",\n        \"estado\": \"n\u00e3o finalizado\",\n    },\n]\n</code></pre> <p></p> <p>Uma outra op\u00e7\u00e3o \u00e9 navegar na sua aplica\u00e7\u00e3o atrav\u00e9s da documenta\u00e7\u00e3o que \u00e9 gerada automaticamente.</p> <p></p>"},{"location":"hello_fastapi/#salvando-a-versao-atual-do-codigo","title":"Salvando a vers\u00e3o atual do c\u00f3digo","text":"<p>Com tudo terminado, vamos salvar a vers\u00e3o atual do c\u00f3digo.</p> <p>Primeiro passo \u00e9 checar o que foi feito at\u00e9 agora:</p> <pre><code>$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    gerenciador_tarefas/\n    tests/\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>Vemos dois diret\u00f3rios n\u00e3o rastreados e precisamos avisar ao controle de vers\u00e3o para monitora-los.</p> <pre><code>git add gerenciador_tarefas tests\n</code></pre> <p>\ud83d\udcbe Agora vamos marcar esta vers\u00e3o como salva.</p> <pre><code>git commit -m \"Adiciona recurso de listar tarefas\"`\n</code></pre> <p>\ud83d\udd27 Por fim envie ao GitHub a vers\u00e3o atualizada do projeto.</p> <pre><code>git push\n</code></pre> <p>\ud83d\ude0e Parab\u00e9ns! Sua aplica\u00e7\u00e3o est\u00e1 tomando forma! J\u00e1 pensou se toda vez que envi\u00e1ssemos uma nova vers\u00e3o para o GitHub, ele verificasse para mim se os testes est\u00e3o passando? Vamos aprender a ter integra\u00e7\u00e3o cont\u00ednua de c\u00f3digo!?</p>"},{"location":"integracao/","title":"\u2705 Integra\u00e7\u00e3o cont\u00ednua","text":""},{"location":"integracao/#conceito","title":"Conceito","text":"<p>O desenvolvedor integra o c\u00f3digo alterado e/ou desenvolvido ao projeto principal na mesma frequ\u00eancia com que as funcionalidades s\u00e3o desenvolvidas, sendo feito muitas vezes.</p> <p>Todo o nosso projeto ser\u00e1 constru\u00eddo utilizando testes automatizados, e sempre rodaremos os testes localmente.</p> <p>Mas como garantir que minha altera\u00e7\u00e3o n\u00e3o impacta com o restante do projeto, ter isto de forma simples e automatizada? Como garantir que a qualidade do c\u00f3digo foi mantida?</p> <p>Utilizaremos o servi\u00e7o GitHub Actions para checar que nosso c\u00f3digo n\u00e3o quebra a \"build\", ou seja, quando integrado o novo c\u00f3digo ao sistema, todo o sistema continua funcional.</p> <p>Basicamente, a grande vantagem da integra\u00e7\u00e3o cont\u00ednua est\u00e1 no feedback instant\u00e2neo. Isso funciona da seguinte forma: a cada commit no reposit\u00f3rio, o build \u00e9 feito automaticamente, com todos os testes sendo executados de forma autom\u00e1tica e falhas sendo detectadas. Se algum commit n\u00e3o compilar ou quebrar qualquer um dos testes, a equipe toma conhecimento instant\u00e2neamente (atrav\u00e9s de email, por exemplo, indicando as falhas e o commit causador das mesmas). A equipe pode ent\u00e3o corrigir o problema o mais r\u00e1pido poss\u00edvel, o que \u00e9 fundamental para n\u00e3o introduzir erros ao criar novas funcionalidades, refatorar, etc. Integra\u00e7\u00e3o cont\u00ednua \u00e9 mais uma forma de trazer seguran\u00e7a em rela\u00e7\u00e3o a mudan\u00e7as: voc\u00ea pode fazer modifica\u00e7\u00f5es sem medo, pois ser\u00e1 avisado caso algo saia do esperado.</p>"},{"location":"integracao/#ferramentas","title":"Ferramentas","text":"<p>Vamos instalar algumas ferramentas para nos ajudarem a terem um c\u00f3digo bem organizado e testado.</p>"},{"location":"integracao/#isort","title":"\ud83d\udd20 isort","text":""},{"location":"integracao/#o-que-e","title":"O que \u00e9?","text":"<p>isort \u00e9 uma ferramenta que ordena de forma alfab\u00e9tica as importa\u00e7\u00f5es, separando as bilbiotecas que s\u00e3o padr\u00f5es da linguagem, as externas ao sistema e as nativas do pr\u00f3prio sistema.</p>"},{"location":"integracao/#para-que-serve","title":"Para que serve?","text":"<p>O isort ir\u00e1 modificar o seu c\u00f3digo ordenando as importa\u00e7\u00f5es alfab\u00e9ticamente. Dessa forma, o bloco de importa\u00e7\u00f5es fica organizado e padronizado no projeto.</p>"},{"location":"integracao/#como-instalar","title":"Como instalar","text":"<p>Execute o comando abaixo:</p> <pre><code>python -m pip install isort\n</code></pre>"},{"location":"integracao/#configuracao","title":"Configura\u00e7\u00e3o","text":"<p>Precisamos adicionar no arquivo <code>pyproject.toml</code> (voc\u00ea deve cria-lo) a seguinte configura\u00e7\u00e3o</p> <p>pyproject.toml<pre><code>[tool.isort]\nprofile = \"black\"\nline_length = 79\n</code></pre> Assim evitamos um conflito com a ferramenta <code>black</code> e <code>isort</code>.</p>"},{"location":"integracao/#como-executar","title":"Como executar","text":"<pre><code>python -m isort .\n</code></pre>"},{"location":"integracao/#black","title":"\u2728 Black","text":""},{"location":"integracao/#o-que-e_1","title":"O que \u00e9?","text":"<p>Black \u00e9 o formatador de c\u00f3digo Python intransigente. Ao us\u00e1-lo, voc\u00ea concorda em ceder o controle sobre as min\u00facias da formata\u00e7\u00e3o manual. Em troca, o black d\u00e1 a voc\u00ea velocidade, determinismo e liberdade do irritante pycodestyle sobre formata\u00e7\u00e3o. Voc\u00ea economizar\u00e1 tempo e energia mental para assuntos mais importantes.</p>"},{"location":"integracao/#para-que-serve_1","title":"Para que serve?","text":"<p>O black \u00e9 um formatador autom\u00e1tico de c\u00f3digo, ele ir\u00e1 modificar o seu c\u00f3digo seguindo o guia de estilo do Python. Iremos configur\u00e1-lo junto ao nosso editor para que a formata\u00e7\u00e3o seja feita atrav\u00e9s de um atalho do teclado como shift + ctrl + i.</p>"},{"location":"integracao/#como-instalar_1","title":"Como instalar","text":"<p>Execute o comando abaixo:</p> <pre><code>python -m pip install black\n</code></pre>"},{"location":"integracao/#configuracao_1","title":"Configura\u00e7\u00e3o","text":"<p>Precisamos adicionar no arquivo <code>pyproject.toml</code> a seguinte configura\u00e7\u00e3o</p> pyproject.toml<pre><code>[tool.black]\nline-length = 79\n</code></pre>"},{"location":"integracao/#como-executar_1","title":"Como executar","text":"<pre><code>python -m black .\n</code></pre> <p>Assim evitamos um conflito com a ferramenta <code>flake8</code>.</p>"},{"location":"integracao/#flake8","title":"\ud83c\udfa8 Flake8","text":""},{"location":"integracao/#o-que-e_2","title":"O que \u00e9?","text":"<p>Flake8 \u00e9 um programa de linha de comando que verifica seu c\u00f3digo e busca por erros ou formata\u00e7\u00f5es que n\u00e3o seguem o guia de estilo padr\u00e3o do python, conhecido como PEP-8 . Al\u00e9m disso tamb\u00e9m verifica a complexidade ciclom\u00e1tica do seu c\u00f3digo.</p>"},{"location":"integracao/#para-que-serve_2","title":"Para que serve?","text":"<p>\u00c9 muito comum cometermos alguns erros de sintaxe, principalmente quando ainda estamos nos familiarizando com uma linguagem nova. Assim como durante o nosso dia a dia podemos esquecer algum c\u00f3digo n\u00e3o utilizado. Esta ferramenta vai analisar o seu c\u00f3digo e procurar poss\u00edveis erros, evitando assim que s\u00f3 ocorram no momento em que o c\u00f3digo for executado. Esta ferramenta tamb\u00e9m aponta poss\u00edveis linhas que n\u00e3o est\u00e3o seguindo o estilo de c\u00f3digo definido para a linguagem python. Outra coisa bem comum quando estamos escrevendo c\u00f3digo \u00e9 que uma parte dele come\u00e7a a se tornar t\u00e3o complexa que h\u00e1 n caminhos por onde seu algoritmo pode seguir. Normalmente isto indica que devemos modificar o c\u00f3digo para torn\u00e1-lo mais simples e leg\u00edvel. O Flake8 ir\u00e1 apontar qual parte do seu c\u00f3digo est\u00e1 complexa e que deve ser modificada. Esta ferramenta ser\u00e1 integrada ao editor, dessa maneira, ao salvar o arquivo, teremos os erros encontrados apontados diretamente no mesmo.</p>"},{"location":"integracao/#como-instalar_2","title":"Como instalar","text":"<p>Execute o comando abaixo:</p> <pre><code>python -m pip install flake8\n</code></pre>"},{"location":"integracao/#como-executar_2","title":"Como executar","text":"<pre><code>python -m flake8 --exclude=.venv\n</code></pre> <p>\u2139\ufe0f  Pode ser necess\u00e1rio a interven\u00e7\u00f5es manuais para que o c\u00f3digo seja corrigido.</p>"},{"location":"integracao/#pre-commit-mencao-honrosa","title":"\ud83d\udd75\ufe0fpre-commit (Men\u00e7\u00e3o honrosa \ud83c\udfc5)","text":"<p>Existem ferramentas que podem executar algum comando antes de um commit, com o objetivo de identificar poss\u00edveis problemas no seu programa antes do envio do c\u00f3digo para o reposit\u00f3rio remoto. Os comandos listados acima s\u00e3o bons exemplos de execu\u00e7\u00f5es que podem ocorrer neste momento. Uma das ferramentas que prov\u00ea essa funcionalidade \u00e9 o pre-commit. Para saber mais, clique aqui.</p>"},{"location":"integracao/#configurando-o-github-actions","title":"\ud83d\udc31 Configurando o GitHub Actions","text":"<ul> <li>Crie a pasta <code>.github/workflows</code> dentro do seu reposit\u00f3rio. Essa \u00e9 a pasta padr\u00e3o para as configura\u00e7\u00f5es do GitHub Actions.</li> </ul> <p><code>mkdir -p .github/workflows</code></p> <ul> <li>Dentro da pasta crie um arquivo chamado <code>main.yml</code>. Esse arquivo ser\u00e1 utilizado para determinar quais passos ser\u00e3o executados na integra\u00e7\u00e3o. O arquivo deve possuir o seguinte conte\u00fado:</li> </ul> .github/workflows/main.yml<pre><code>name: main\n\non:\n  push:\n    branches:\n      - \"main\"\n    tags:\n      - \"*\"\n  pull_request:\n    branches:\n      - \"main\"\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v3\n        with:\n          python-version: '3.10'\n          cache: 'pip'\n      - run: pip install -r dev-requirements.txt\n\n      - name: Run isort\n        run: python -m isort --check .\n\n      - name: Run black\n        run: python -m black --check .\n\n      - name: Run flake8\n        run: python -m flake8 . --exclude=.venv\n\n      - name: Run tests\n        run: python -m pytest .\n</code></pre> <p>Atrav\u00e9s do arquivo de configura\u00e7\u00e3o, n\u00f3s definimos que alguns passos ser\u00e3o executados toda vez que houver um <code>push</code> ou a abertura de um <code>pull request</code> no reposit\u00f3rio. Os passos executados ser\u00e3o os seguintes:</p> <p>1 - Instalar todas as depend\u00eancias necess\u00e1rias.</p> <p>2 - Executar o isort.</p> <p>3 - Executar o black.</p> <p>4 - Executar o flake8.</p> <p>5 - Executar os testes.</p> <p>Como instalamos v\u00e1rias bibliotecas, precisamos atualizar nosso arquivo de requisitos.</p> <p>Como as bibliotecas que instalamos s\u00e3o para garantir a qualidade do c\u00f3digo e n\u00e3o s\u00e3o necess\u00e1rias na execu\u00e7\u00e3o da aplica\u00e7\u00e3o adicionaremos elas ao arquivo <code>dev-requirements.txt</code>.</p> <p>O arquivo ficar\u00e1 assim:</p> dev-requirements.txt<pre><code>-r requirements.txt\npytest==7.1.2\nhttpie==3.2.1\nisort==5.10.1\nflake8==4.0.1\nblack==22.3.0\n</code></pre> <p>\ud83c\udf89 Pronto, a partir de agora, o GitHub Actions ir\u00e1 rodar todos as valida\u00e7\u00f5es e testes do seu projeto de forma automatizada e indicar\u00e1 se a constru\u00e7\u00e3o do mesmo est\u00e1 com problemas.</p>"},{"location":"integracao/#salvando-a-versao-atual-do-codigo","title":"\ud83d\udcbe Salvando a vers\u00e3o atual do c\u00f3digo","text":"<p>Primeiro passo \u00e9 checar o que foi feito at\u00e9 agora:</p> <pre><code>$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add &lt;file&gt;...\" to update what will be committed)\n  (use \"git restore &lt;file&gt;...\" to discard changes in working directory)\n    modified:   dev-requirements.txt\n    modified:   gerenciador_tarefas/gerenciador.py\n    modified:   tests/test_gerenciador.py\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    .github/\n  pyproject.toml\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n</code></pre> <p>Vemos uma pasta n\u00e3o rastreada, precisamos avisar ao controle de vers\u00e3o que monitore a pasta e seu conte\u00fado.</p> <pre><code>git add .github/\n</code></pre> <p>Vamos adicionar tamb\u00e9m as novas depend\u00eancias instaladas e os arquivos que possivelmente foram modificados por nossas ferramentas de qualidade.</p> <p><code>git add dev-requirements tests gerenciador_tarefas pyproject.toml</code></p> <p>\ud83d\udcbe Agora vamos marcar esta vers\u00e3o como consolidada.</p> <pre><code>git commit -m \"Adiciona integra\u00e7\u00e3o cont\u00ednua\"\n</code></pre> <p>\ud83d\udc31 Por fim, envie ao GitHub a vers\u00e3o atualizada do projeto. <pre><code>git push\n</code></pre></p> <p>\u2705 Pronto, agora o seu projeto est\u00e1 integrado com o GitHub Actions. \ud83c\udf89</p> <p>Confira na aba actions do seu reposit\u00f3rio.</p> <p></p>"},{"location":"planejando/","title":"\ud83d\udcad Planejando o que ser\u00e1 desenvolvido","text":""},{"location":"planejando/#definindo-o-que-iremos-desenvolver","title":"\ud83d\udca1 Definindo o que iremos desenvolver","text":"<p>Quando iniciamos um projeto, a primeira coisa que devemos conhecer s\u00e3o as \"regras de neg\u00f3cio\" do nosso projeto. Mas o que \u00e9 isso?</p> <p>\u00c9 a descri\u00e7\u00e3o de como o nosso sistema deve ser e como deve se comportar diante da intera\u00e7\u00e3o do usu\u00e1rio. Por exemplo, o sistema escolhido hoje \u00e9 para organizar uma lista de tarefas.</p>"},{"location":"planejando/#regras-de-negocio","title":"\u270f\ufe0f Regras de neg\u00f3cio","text":"<p>O sistema ser\u00e1 um gerenciador de tarefas e a primeira decis\u00e3o \u00e9 que nosso sistema deve apresentar uma interface que possa ser consumida tanto por um website, quanto por um aplicativo para dispositivos m\u00f3veis.</p> <p>Cada tarefa possui um identificador \u00fanico, um t\u00edtulo, uma descri\u00e7\u00e3o e seu estado que pode ser finalizado/n\u00e3o-finalizado.</p> <p>O t\u00edtulo dever\u00e1 ter entre 3 e 50 caracteres e a descri\u00e7\u00e3o no m\u00e1ximo 140 caracteres.</p> <p>Como usu\u00e1rio devo ser capaz de:</p> <ul> <li> <p>Adicionar e remover tarefas.</p> </li> <li> <p>Listar todas as tarefas e o crit\u00e9rio de ordena\u00e7\u00e3o \u00e9 seu estado. N\u00e3o finalizadas devem aparecer primeiro.</p> </li> <li> <p>Mudar o estado de n\u00e3o-finalizado para finalizado.</p> </li> <li> <p>Selecionar somente uma tarefa e exibi-la detalhadamente.</p> </li> </ul> <p>O sistema deve apresentar testes.</p> <p>\ud83d\ude28 E agora, o que fazer? Por onde come\u00e7o? Vamos escolher nossas ferramentas!</p>"},{"location":"projeto/","title":"Iniciando o projeto","text":"<p>J\u00e1 temos as esp\u00e1tulas, facas, colheres e outros instrumentos na mesa, mas, para prosseguirmos, precisamos escolher os melhores ingredientes.</p> <p>Desenvolver um projeto n\u00e3o significa escrever tudo do zero e poderemos contar com ajuda de trechos escritos por outros programadores. Estes trechos comuns de c\u00f3digo s\u00e3o chamados bibliotecas e vamos acabar adicionando algumas ao nosso projeto.</p> <p>Mas antes de tudo, precisamos iniciar nosso projeto.</p>"},{"location":"projeto/#comecando-a-tirar-o-projeto-do-papel","title":"\u25b6\ufe0f Come\u00e7ando a tirar o projeto do papel","text":"<p>Daremos nosso primeiro passo, criando um diret\u00f3rio onde ser\u00e3o armazenados todos os arquivos do projeto.</p> <p>Faremos isto utilizando o github, que \u00e9 uma plataforma gratuita, muito conhecida e que ir\u00e1 nos ajudar com algumas integra\u00e7\u00f5es no futuro.</p> <p>Mas por que iniciaremos criando o projeto l\u00e1 e n\u00e3o no pr\u00f3prio computador?</p> <p>O primeiro motivo \u00e9 que j\u00e1 criaremos o projeto com controle de vers\u00e3o, ou seja a cada passo da sua cria\u00e7\u00e3o vamos salvando as altera\u00e7\u00f5es, evitando que os passos se percam e, caso necess\u00e1rio poderemos desfazer algum passo errado.</p> <p>Outro motivo \u00e9 que se algo acontecer com seu computador, teremos salvo uma vers\u00e3o do projeto.</p> <p>Abra seu navegador e acesse o seguinte endere\u00e7o: http://github.com. Crie uma conta se ainda n\u00e3o tiver.</p> <p>Aperte o bot\u00e3o novo_reposit\u00f3rio.</p> <p></p> <p>Preencha os campos como visto na imagem abaixo.</p> <p>Warning</p> <p>As setas indicam o que deve ser preenchido.</p> <p></p> <p>Volte para o terminal que voc\u00ea usou anteriormente e navegue at\u00e9 o diret\u00f3rio onde voc\u00ea deseja salvar o seu projeto. Observe os exemplos abaixo e adapte para o diret\u00f3rio que desejar:</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Caso o terminal n\u00e3o esteja aberto, clique no bot\u00e3o iniciar, busque por <code>powershell</code> e abra o programa <code>Windows PowerShell</code>. Agora digite <code>cd C:\\</code>.</p> <p>Caso o terminal n\u00e3o esteja aberto, abra um terminal e digite <code>cd ~/</code>.</p> <p>At\u00e9 agora n\u00f3s iniciamos o nosso projeto apenas na web, em nossa conta do github, mas, agora iremos trazer uma c\u00f3pia do que est\u00e1 no github para a nossa m\u00e1quina local. Para isso, utilizaremos um comando de nossa ferramenta de controle de vers\u00e3o git chamada \"clone\".</p> <p><code>git clone</code> \u00e9 um comando para criar uma c\u00f3pia dos arquivos e suas vers\u00f5es. Pode ser feito para trazer uma c\u00f3pia do reposit\u00f3rio do servidor para o computador local.</p> <p>Para isso, iremos copiar a URL do reposit\u00f3rio do github conforme a imagem abaixo:</p> <p></p> <p>Warning</p> <p>O comando abaixo deve ser modificado com a URL que voc\u00ea acabou de copiar.</p> <pre><code>$ git clone https://github.com/cassiobotaro/gerenciador-tarefas.git\nCloning into 'gerenciador-tarefas'...\nremote: Counting objects: 5, done.\nremote: Compressing objects: 100% (4/4), done.\nremote: Total 5 (delta 0), reused 0 (delta 0), pack-reused 0\nUnpacking objects: 100% (5/5), done.\n</code></pre> <p>Aproveite e j\u00e1 configure seu usu\u00e1rio git para este projeto, dentro do diret\u00f3rio rec\u00e9m clonado e digite os seguintes comandos.</p> <p>Warning</p> <p>Os comandos abaixo devem ser modificados com seu email e nome de usu\u00e1rio do github.</p> <pre><code>$ git config --local user.email cassiobotaro@github.com\n\n$ git config --local user.name cassiobotaro\n</code></pre> <p>\"Voil\u00e0\", j\u00e1 temos o projeto iniciado.</p> <p>Navegue at\u00e9 o diret\u00f3rio onde foi executado o comando de <code>clone</code> do projeto. Prossiga com a instala\u00e7\u00e3o das bibliotecas de acordo com o seu sistema operacional.</p> <p>Warning</p> <p>N\u00e3o se esque\u00e7a de entrar no diret\u00f3rio do projeto antes de continuar a instala\u00e7\u00e3o das bibliotecas.</p>"},{"location":"projeto/#o-ambiente-virtual","title":"\ud83d\udda5\ufe0f O ambiente virtual","text":"<p>Iniciei um projeto e ele utiliza a biblioteca fastapi na vers\u00e3o 0.2, tr\u00eas meses depois fui iniciar outro e a vers\u00e3o do fastapi j\u00e1 era 0.3.</p> <p>Ser\u00e1 que n\u00e3o d\u00e1 problema se eu mudar no primeiro projeto? Ou ser\u00e1 que mudo no segundo?</p> <p>Para evitar este tipo de problema, vamos criar o que chamaremos de ambiente virtual.</p> <p>Na pr\u00e1tica o que vamos fazer \u00e9 instalar as bibliotecas em um diret\u00f3rio que est\u00e1 relacionado ao projeto. Assim cada projeto pode ter suas pr\u00f3prias bibliotecas na vers\u00e3o que quiser.</p> <p>O comando para isto \u00e9: </p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code>. Agora digite <code>python -m venv .venv</code>.</p> <p>Volte ao terminal e digite <code>python3 -m venv .venv</code>.</p> <p>Sendo que .venv \u00e9 o nome deste ambiente isolado.</p> <p>Este ambiente isolado ser\u00e1 visto como um diret\u00f3rio criado na pasta do projeto.</p> <p>O ponto na frente do nome faz com que o diret\u00f3rio fique oculto em ambientes linux</p> <p>Depois de criado, temos de ativar este ambiente e isto \u00e9 importante pois sempre que decidir trabalhar neste projeto voc\u00ea dever\u00e1 repetir este passo.</p> <p>O comando para isto \u00e9: </p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code>. Agora digite <code>.venv\\Scripts\\activate</code>.</p> <p>Volte ao terminal e digite <code>source .venv/bin/activate</code>.</p> <p>Pronto, agora estamos preparados para instalar as bibliotecas que precisaremos.</p>"},{"location":"projeto/#bibliotecas-e-utilitarios","title":"\ud83d\udcda Bibliotecas e utilit\u00e1rios","text":"<p>Chegou a hora de instalar algumas bibliotecas e utilit\u00e1rios que nos auxiliar\u00e3o na cria\u00e7\u00e3o do nosso sistema web, na realiza\u00e7\u00e3o de testes unit\u00e1rios e testes manuais.</p> <p>Siga os passos de acordo com o seu sistema operacional para cada ferramenta. Tenha sempre certeza de que a ferramenta est\u00e1 instalada e funcionando.</p> <p>Warning</p> <p>Certifique-se de que seu ambiente est\u00e1 ativo antes de prosseguir com as instala\u00e7\u00f5es.</p>"},{"location":"projeto/#fastapi","title":"\u26a1 FastAPI","text":"<p>O que \u00e9?</p> <p>O fastapi \u00e9 uma ferramenta para desenvolvimento web, possui alta performance, f\u00e1cil de aprender, r\u00e1pida para escrever c\u00f3digo e pronta para colocar o c\u00f3digo no ar.</p> <p>Para que serve?</p> <p>Serve para escrevermos nossa aplica\u00e7\u00e3o web de forma r\u00e1pida e customiz\u00e1vel.</p> <p>Possui fun\u00e7\u00f5es que auxiliam opera\u00e7\u00f5es como roteamento, tratamento de requisi\u00e7\u00f5es, renderiza\u00e7\u00e3o de conte\u00fado, gerenciamento de sess\u00e3o e cookies, assim como v\u00e1rias outras que s\u00e3o t\u00edpicas da web.</p> <p>Como instalar</p> <p>Warning</p> <p>Preste aten\u00e7\u00e3o que os comandos ser\u00e3o executados dentro do diret\u00f3rio do projeto.</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e digite o comando <code>pip install fastapi</code>.</p> <p>Volte ao terminal e digite o comando <code>pip install fastapi</code>.</p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e agora digite <code>python -c \"import fastapi\"</code>. Nenhum erro deve ocorrer.</p> <p>Volte ao terminal e agora digite <code>python -c \"import fastapi\"</code>. Nenhum erro deve ocorrer.</p>"},{"location":"projeto/#httpie","title":"\ud83d\udd17 Httpie","text":"<p>O que \u00e9?</p> <p>HTTPie \u00e9 um cliente HTTP por linha de comando. Seu objetivo \u00e9 transformar a intera\u00e7\u00e3o com servi\u00e7os web o mais humano poss\u00edvel.</p> <p>Para que serve?</p> <p>Em diversos momentos do curso, teremos de testar manualmente se nosso sistema est\u00e1 funcionando, ainda que possua testes automatizados.</p> <p>Esta ferramenta ajuda a fazer estes testes de uma maneira mais simples.</p> <p>Como instalar</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e digite o comando <code>pip install httpie</code>.</p> <p>Volte ao terminal e digite o comando <code>pip install httpie</code>.</p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e agora digite o comando <code>http --version</code>.</p> <p>Volte ao terminal e agora digite o comando <code>http --version</code>.</p> <p>Warning</p> <p>Note que foi utilizado o comando http ao inv\u00e9s de httpie, este \u00e9 o nome do execut\u00e1vel do httpie depois de instalado no sistema.</p> <p>A sa\u00edda para ambos os sistemas operacionais dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ http --version\n3.2.1\n</code></pre>"},{"location":"projeto/#uvicorn","title":"\ud83e\udd84 Uvicorn","text":"<p>O que \u00e9?</p> <p>O uvicorn \u00e9 um servidor de aplica\u00e7\u00e3o com suporte a frameworks ass\u00edncronos.</p> <p>Para que serve?</p> <p>O uvicorn serve para rodar a nossa aplica\u00e7\u00e3o, tanto na nossa m\u00e1quina quanto em um servidor na internet.</p> <p>Como instalar</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e digite o comando <code>pip install uvicorn</code>.</p> <p>Volte ao terminal e digite o comando <code>pip install uvicorn</code>.</p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e agora digite o comando <code>uvicorn --help</code>.</p> <p>Volte ao terminal e agora digite o comando <code>uvicorn --help</code>.</p> <p>A sa\u00edda para ambos os sistemas operacionais dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>Usage: uvicorn [OPTIONS] APP\n\nOptions:\n  --host TEXT                     Bind socket to this host.  [default:\n                                  127.0.0.1]\n  --port INTEGER                  Bind socket to this port.  [default: 8000]\n  --uds TEXT                      Bind to a UNIX domain socket.\n  --fd INTEGER                    Bind to socket from this file descriptor.\n  --reload                        Enable auto-reload.\n  --reload-dir TEXT               Set reload directories explicitly, instead\n                                  of using the current working directory.\n  --workers INTEGER               Number of worker processes. Defaults to the\n                                  $WEB_CONCURRENCY environment variable if\n                                  available. Not valid with --reload.\n  --loop [auto|asyncio|uvloop|iocp]\n                                  Event loop implementation.  [default: auto]\n  --http [auto|h11|httptools]     HTTP protocol implementation.  [default:\n                                  auto]\n  --ws [auto|none|websockets|wsproto]\n                                  WebSocket protocol implementation.\n                                  [default: auto]\n  --lifespan [auto|on|off]        Lifespan implementation.  [default: auto]\n  --interface [auto|asgi3|asgi2|wsgi]\n                                  Select ASGI3, ASGI2, or WSGI as the\n                                  application interface.  [default: auto]\n  --env-file PATH                 Environment configuration file.\n  --log-config PATH               Logging configuration file.\n  --log-level [critical|error|warning|info|debug|trace]\n                                  Log level. [default: info]\n  --access-log / --no-access-log  Enable/Disable access log.\n  --proxy-headers / --no-proxy-headers\n                                  Enable/Disable X-Forwarded-Proto,\n                                  X-Forwarded-For, X-Forwarded-Port to\n                                  populate remote address info.\n  --forwarded-allow-ips TEXT      Comma seperated list of IPs to trust with\n                                  proxy headers. Defaults to the\n                                  $FORWARDED_ALLOW_IPS environment variable if\n                                  available, or '127.0.0.1'.\n  --root-path TEXT                Set the ASGI 'root_path' for applications\n                                  submounted below a given URL path.\n  --limit-concurrency INTEGER     Maximum number of concurrent connections or\n                                  tasks to allow, before issuing HTTP 503\n                                  responses.\n  --limit-max-requests INTEGER    Maximum number of requests to service before\n                                  terminating the process.\n  --timeout-keep-alive INTEGER    Close Keep-Alive connections if no new data\n                                  is received within this timeout.  [default:\n                                  5]\n  --ssl-keyfile TEXT              SSL key file\n  --ssl-certfile TEXT             SSL certificate file\n  --ssl-version INTEGER           SSL version to use (see stdlib ssl module's)\n                                  [default: 2]\n  --ssl-cert-reqs INTEGER         Whether client certificate is required (see\n                                  stdlib ssl module's)  [default: 0]\n  --ssl-ca-certs TEXT             CA certificates file\n  --ssl-ciphers TEXT              Ciphers to use (see stdlib ssl module's)\n                                  [default: TLSv1]\n  --header TEXT                   Specify custom default HTTP response headers\n                                  as a Name:Value pair\n  --help                          Show this message and exit.\n</code></pre>"},{"location":"projeto/#pytest","title":"\ud83d\udea6 Pytest","text":"<p>O que \u00e9?</p> <p>O framework pytest \u00e9 f\u00e1cil para escrever teste simples, ainda escala para suportar testes funcionais complexos para aplica\u00e7\u00f5es e bibliotecas.</p> <p>Para que serve?</p> <p>J\u00e1 dizia Michael C. Feathers, \"Um c\u00f3digo sem testes, \u00e9 um c\u00f3digo ruim. N\u00e3o importa qu\u00e3o bem ele foi escrito\".  Vamos ent\u00e3o instalar o pytest, que \u00e9 uma ferramenta que auxilia na execu\u00e7\u00e3o de testes.</p> <p>Como instalar</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e digite o comando <code>pip install pytest</code>.</p> <p>Volte ao terminal e digite o comando <code>pip install pytest</code>.</p> <p>Vamos verificar se deu tudo certo?</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e agora digite o comando <code>pytest --version</code>.</p> <p>Volte ao terminal e agora digite o comando <code>pytest --version</code>.</p> <p>A sa\u00edda para ambos os sistemas operacionais dever\u00e1 ser similar a apresentada abaixo:</p> <pre><code>$ pytest --version\npytest 7.1.2\n</code></pre>"},{"location":"projeto/#nota-importante-sobre-ambientes-virtuais","title":"\u26a0\ufe0f Nota importante sobre ambientes virtuais","text":"<p>Se neste momento, voc\u00ea digitar <code>cmd</code> no windows, ou abrir um terminal no linux e digitar <code>python3</code> ou <code>python</code> no windows, e em seguida tentar importar a bilbioteca fastapi o seguinte erro ser\u00e1 mostrado. \ud83d\ude31</p> <pre><code>$ python\nPython 3.10.4 (main, Apr 20 2022, 22:30:21) [GCC 11.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt;&gt;&gt; import fastapi\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nModuleNotFoundError: No module named 'fastapi'\n&gt;&gt;&gt;\n</code></pre> <p>Tip</p> <p>Utilize <code>Ctrl + d</code> ou <code>exit()</code> para sair do python.</p> <p>Acontece que instalamos o FastAPI somente no ambiente virtual. Para entrarmos no ambiente virtual:</p> \ud83d\udda5\ufe0f Windows\ud83d\udc27\ud83c\udf4e Ubuntu/Mac <p>Volte ao <code>Windows PowerShell</code> e agora digite o comando <code>.venv\\Scripts\\activate</code>.</p> <p>Volte ao terminal e agora digite o comando <code>source &lt;venv&gt;/bin/activate</code>.</p>"},{"location":"projeto/#salvando-o-momento-atual-do-nosso-projeto","title":"Salvando o momento atual do nosso projeto","text":"<p>Neste momento seu diret\u00f3rio deve estar assim:</p> <pre><code>.\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre> <p>E se eu te pedisse agora uma c\u00f3pia do projeto, como eu saberia de toda essa lista de coisas necess\u00e1rias pro c\u00f3digo rodar?</p> <p>Para evitar este problema criaremos arquivos com as depend\u00eancias que instalamos no nosso projeto.</p> <p>Vamos come\u00e7ar criando um arquivo chamado requirements.txt com o seguinte conte\u00fado.</p> requirements.txt<pre><code>fastapi==0.77.1\nuvicorn==0.17.6\n</code></pre> <p>Depois criaremos um segundo arquivo chamado <code>dev-requirements.txt</code> e colocaremos o seguinte conte\u00fado.</p> dev-requirements.txt<pre><code>-r requirements.txt\npytest==7.1.2\nhttpie==3.2.1\n</code></pre> <p>Warning</p> <p>Os arquivos devem ser criados na pasta principal do projeto. Teremos ent\u00e3o os seguintes arquivos no nosso diret\u00f3rio.</p> <pre><code>.\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 dev-requirements.txt\n\u2514\u2500\u2500 requirements.txt\n</code></pre> <p>Por que arquivos separados?</p> <p>No <code>requirements.txt</code>, s\u00f3 colocamos aquelas bibliotecas realmente necess\u00e1rias para o sistema ir ao ar, j\u00e1 no <code>dev-requirements.txt</code>, temos as dep\u00eandencias que somente s\u00e3o \u00fateis enquanto estamos desenvolvendo o sistema.</p> <p>Aquele <code>-r requirements.txt</code> no arquivo de desenvolvimento garante que as depend\u00eancias principais ser\u00e3o instaladas e em seguidas as outras que somente s\u00e3o \u00fateis durante o desenvolvimento.</p> <p>Quando formos colocar o site no ar, estes arquivos ser\u00e3o bem \u00fateis.</p> <p>Instalado as depend\u00eancias, vamos salvar uma primeira vers\u00e3o do nosso projeto com o nosso andamento?</p> <p>Volte ao seu terminal ou Windows PowerShell e o primeiro passo \u00e9 checar o que foi feito at\u00e9 agora:</p> <pre><code>$ git status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nUntracked files:\n  (use \"git add &lt;file&gt;...\" to include in what will be committed)\n    dev-requirements.txt\n    requirements.txt\n\nnothing added to commit but untracked files present (use \"git add\" to track)\n</code></pre> <p>Vemos dois arquivos n\u00e3o rastreados, precisamos avisar ao controle de vers\u00e3o que monitore estes arquivos.</p> <pre><code>git add requirements.txt dev-requirements.txt\n</code></pre> <p>\ud83d\udcbe Agora vamos marcar esta vers\u00e3o como salva.</p> <pre><code>git commit -m \"Adiciona depend\u00eancias do projeto\"\n</code></pre> <p>\ud83d\udd27 Por fim, envie ao GitHub a vers\u00e3o atualizada do projeto.</p> <pre><code>git push\n</code></pre> <p>\ud83c\udf70 Entusiasmados a come\u00e7ar a escrever sua aplica\u00e7\u00e3o? Agora que temos todo o ambiente configurado, j\u00e1 estamos bem pr\u00f3ximo disso, faremos um nivelamento de conhecimento sobre web e python e em breve termos nossa aplica\u00e7\u00e3o no ar!</p>"},{"location":"python/","title":"\ud83d\udc0d Primeiros passos com python","text":"<p>Infelizmente esse tutorial foi pensado para ser ministrado em apenas algumas horas, o que nos deixa com pouco tempo para aprofundar na linguagem, aqui ser\u00e3o apresentados apenas alguns conceitos que ser\u00e3o necess\u00e1rios para o restante do tutorial.</p> <p>Caso tenha chegado aqui por outros meios que n\u00e3o o curso presencial, e n\u00e3o tenha conhecimento na linguagem, recomendo dar uma parada, e assistir as excelentes aulas do Professor Masanori. O python para zumbis tem sido uma excelente porta para muitas pessoas, assim como o Curso em V\u00eddeo - Python do professor Guanabara.</p> <p>Uma outra dica \u00e9 a Live de Python que ocorre \u00e0s segundas, sempre \u00e0s 22h.</p> <p>Abra um console(sim, a tela preta), digite python e aproveite para testar os comandos ensinados abaixo de uma forma interativa.</p>"},{"location":"python/#ola-mundo","title":"Ol\u00e1 mundo","text":"<p>Ol\u00e1 Mundo em python \u00e9 t\u00e3o simples como <code>print('Ol\u00e1 mundo')</code> por isso um Ol\u00e1 mundo mais pyth\u00f4nico seria <code>import antigravity</code>.</p> <p>Python \u00e9 conhecido por suas baterias inclu\u00eddas, e at\u00e9 mesmo o Ol\u00e1 mundo pode ser importado <code>import __hello__</code>.</p>"},{"location":"python/#por-favor-e-obrigado","title":"Por Favor e Obrigado","text":"<p>Duas fun\u00e7\u00f5es que podem ser bastante \u00fateis durante o desenvolvimento python e que costumo dizer que s\u00e3o como \"por favor\" e \"obrigado\", s\u00e3o as fun\u00e7\u00f5es help e dir.</p> <p>A fun\u00e7\u00e3o \"help\" pede ajuda sobre um determinado recurso, funcionando inclusive com palavras reservadas como 'if'. \u00c9 retornado a documenta\u00e7\u00e3o daquele recurso. <pre><code>&gt;&gt;&gt; help(abs)\nHelp on built-in function abs in module builtins:\n\nabs(x, /)\n    Return the absolute value of the argument.\n\n&gt;&gt;&gt; help('if')\nThe \"if\" statement\n******************\n\nThe \"if\" statement is used for conditional execution:\n\n   if_stmt ::= \"if\" expression \":\" suite\n               ( \"elif\" expression \":\" suite )*\n               [\"else\" \":\" suite]\n...\n</code></pre></p> <p>A fun\u00e7\u00e3o \"dir\" lista todos os atributos e m\u00e9todos de uma determinada inst\u00e2ncia. Como em python tudo \u00e9 objeto, esta fun\u00e7\u00e3o mostra como a inst\u00e2ncia do objeto se comporta e quais s\u00e3o seus atributos. <pre><code>&gt;&gt;&gt;dir(5)\n['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes']\n</code></pre></p>"},{"location":"python/#estrutura-de-chave-e-valor","title":"Estrutura de chave e valor","text":"<p>Python possui por padr\u00e3o uma estrutura de dados de array associativo, que \u00e9 chamado dicion\u00e1rio. Esta estrutura armazena valores associando uma chave a seu conte\u00fado. Veja abaixo algumas tarefas rudimentares com esta estrutura.</p> <pre><code>&gt;&gt;&gt; tarefas = {} # inicializando uma estrutura vazia\n\n&gt;&gt;&gt; tarefas[1] = 'tarefa 1' # definindo uma tarefa de chave 1, com conte\u00fado 'tarefa 1'\n\n&gt;&gt;&gt; print(tarefas[1])  # exibindo a tarefa 1\n\n&gt;&gt;&gt; tarefas[2] = 'tarefa 2' # definindo uma tarefa de chave 2, com conte\u00fado 'tarefa 2'\n\n&gt;&gt;&gt; tarefas[3] = 'tarefa-3' # definindo uma tarefa de chave 3, com conte\u00fado 'tarefa 3'\n\n&gt;&gt;&gt; tarefas[3] = 'tarefa 3' # editando uma tarefa\n\n&gt;&gt;&gt; del tarefas[1] # removendo a tarefa\n</code></pre>"},{"location":"python/#percorrendo-estruturas","title":"Percorrendo estruturas","text":"<p>O la\u00e7o de repeti\u00e7\u00e3o da linguagem Python \u00e9 atrav\u00e9s de itera\u00e7\u00e3o de cole\u00e7\u00f5es. Tudo que pode ser percorr\u00edvel pode ser utilizado em uma estrutura de repeti\u00e7\u00e3o.</p> <pre><code>&gt;&gt;&gt; for tarefa in tarefas:\n        print(tarefa)\n</code></pre>"},{"location":"python/#funcoes","title":"Fun\u00e7\u00f5es","text":"<p>Por\u00e7\u00e3o de c\u00f3digo que resolve um problema muito espec\u00edfico. Boas pr\u00e1ticas dizem que uma fun\u00e7\u00e3o deve fazer somente uma coisa e fazer isto bem.</p> <pre><code>def soma(x, y):\n   return x + y\n</code></pre>"},{"location":"python/#decorador","title":"Decorador","text":"<p>\u00c9 um a\u00e7\u00facar sint\u00e1tico que nos permite alterar mais convenientemente fun\u00e7\u00f5es e m\u00e9todos. Pode ser definido como uma fun\u00e7\u00e3o, que ao inv\u00e9s de retornar algum resultado, retorna a fun\u00e7\u00e3o recebida como par\u00e2metro modificada.</p> <pre><code>def p_decorate(func):\n   def func_wrapper(name):\n       return f\"&lt;p&gt;{func(name)}&lt;/p&gt;\"\n   return func_wrapper\n\n@p_decorate\ndef get_text(name):\n   return f\"lorem ipsum, {name} dolor sit amet\"\n\nprint (get_text(\"John\"))\n</code></pre> <p>Sa\u00edda: <pre><code>&lt;p&gt;lorem ipsum, John dolor sit amet&lt;/p&gt;\n</code></pre></p> <p>Vimos um pouco sobre a web, demos uma passada no python, ent\u00e3o agora j\u00e1 vamos come\u00e7ar a escrever c\u00f3digo?</p> <p>Calma, ainda temos mais um conceito que \u00e9 muito importante para n\u00f3s. J\u00e1 ouviu falar do desenvolvimento guiado por testes, que popularmente \u00e9 conhecido pelas letras <code>TDD</code>? Vamos aprender como e por que escrever testes automatizados antes mesmo de escrever c\u00f3digo.</p>"},{"location":"referencias/","title":"\ud83d\udcd1 Refer\u00eancias e Dicas","text":"<ul> <li>Grupo brasileiro de FastAPI no telegram</li> <li>Integra\u00e7\u00e3o cont\u00ednua e o processo agile</li> <li>URL ou URI, qual a diferen\u00e7a?</li> <li>Guia para entender decoradores (en)</li> <li>Pense em Python</li> <li>Documenta\u00e7\u00e3o do FastAPI</li> <li>Lista de ferramentas adicionais para o FastAPI</li> <li>Test Driven Development by Example - Kent Beck (en)</li> <li>Learning Test-Driven Development - Saleem Siddiqui (en)</li> <li>Canal do Dunossauro \ud83e\udd96</li> <li>Canal do R\u00e9gis do Python</li> <li>Canal do Bruno Rocha</li> <li>Canal sobre Entrega Cont\u00ednua (en)</li> <li>Construindo APIs robustas</li> <li>Python MG no telegram</li> <li>Live de Python no telegram</li> <li>Tutorial Django Girls</li> </ul>"},{"location":"testes/","title":"\ud83d\udc10 Desenvolvimento guiado por testes (TDD)","text":""},{"location":"testes/#testes-automatizados","title":"Testes automatizados","text":"<p>Talvez tenha chegado aqui sem conhecimento sobre testes automatizados, por isso vamos a uma breve explica\u00e7\u00e3o.</p> <p>\u00c9 muito comum enquanto estamos desenvolvendo, testarmos manualmente as funcionalidades que estamos implementando, mas o que pode ocorrer se eu me esquecer de testar alguma funcionalidade? Por isso escrevemos c\u00f3digo para testar o c\u00f3digo das nossas funcionalidades.</p> <p>Automatizar testes \u00e9 uma maneira de agilizar nosso processo de desenvolvimento, garantindo que novas funcionalidades n\u00e3o impactam sobre as antigas.</p> <p>Um exemplo de teste automatizado.</p> <p>c\u00f3digo</p> impar.py<pre><code>def \u00e9_impar(numero):\n    'Retorna True se um n\u00famero \u00e9 verdadeiro, sen\u00e3o False.'\n    return numero % 2 != 0\n</code></pre> <p>teste</p> test_impar.py<pre><code>def test_quando_entrada_\u00e9_tr\u00eas_retorna_verdadeiro():\n    assert \u00e9_impar(3) is True\n\n\ndef test_quando_entrada_\u00e9_dois_retorna_falso():\n    assert \u00e9_impar(2) is False\n</code></pre> <p>\u00c9 importante notar que nos testes eu tento cobrir todas as possibilidades de resultado daquela fun\u00e7\u00e3o, como no exemplo que testo a fun\u00e7\u00e3o para valores pares e \u00edmpares.</p>"},{"location":"testes/#o-que-e-tdd","title":"O que \u00e9 TDD?","text":"<p>Desenvolvimento guiado por testes(Test Driven Development) \u00e9 uma t\u00e9cnica de desenvolvimento de software que baseia em um ciclo curto de repeti\u00e7\u00f5es: Primeiramente o desenvolvedor escreve um caso de teste automatizado que define uma melhoria desejada ou uma nova funcionalidade. Ent\u00e3o, \u00e9 produzido c\u00f3digo que possa ser validado pelo teste para posteriormente o c\u00f3digo ser refatorado para um c\u00f3digo sob padr\u00f5es aceit\u00e1veis.</p> <p>Mas por que TDD?</p> <p>Escrever testes antes do c\u00f3digo ajuda no planejamento da arquitetura da aplica\u00e7\u00e3o, e os testes podem ser um guia de como a aplica\u00e7\u00e3o deve se comportar.</p>"},{"location":"testes/#o-ciclo","title":"O ciclo","text":"<p>1 - Adicione um teste</p> <p>Normalmente analisamos alguma funcionalidade que desejamos implementar ou validar e escrevemos um teste que ser\u00e1 executado automaticamente relacionado aquela funcionalidade. Ainda que uma fun\u00e7\u00e3o/classe n\u00e3o exista, devemos escrever o comportamento esperado da mesma.</p> <p>2 - Verifique se algum teste quebrou</p> <p>Neste ponto devemos verificar se os testes passam a falhar(os antigos e o que voc\u00ea acabou de escrever)</p> <p>3 - Escreva c\u00f3digo</p> <p>Escreva c\u00f3digo necess\u00e1rio para que seu teste seja contemplado, mas evite escrever muito al\u00e9m do que necess\u00e1rio.</p> <p>4 - Refatore seu c\u00f3digo</p> <p>Com os testes passando, analise se \u00e9 poss\u00edvel alguma refatora\u00e7\u00e3o.</p> <p>5 - Volte para o passo 1</p> <p>\ud83d\ude1f Ainda n\u00e3o ficou claro o processo? N\u00e3o se preocupe, daqui pra frente iremos ver este ciclo na pr\u00e1tica.</p>"},{"location":"web/","title":"\ud83c\udf0e Um pouco sobre a web","text":"<p>Antes de avan\u00e7armos com a cria\u00e7\u00e3o da nossa aplica\u00e7\u00e3o, para nivelarmos a turma, vamos dar uma espiada em alguns conceitos de desenvolvimento web. Eles ser\u00e3o necess\u00e1rios para o compreendimento dos t\u00f3picos a seguir.</p> <p>Caso n\u00e3o seja novidade para voc\u00ea, tudo bem, pode pular este passo, mas se n\u00e3o se sentir confiante, d\u00ea uma olhada.</p> <p>Aprenderemos um novo vocabul\u00e1rio com os t\u00f3picos a seguir, que s\u00e3o amplamente utilizados no desenvolvimento web, independente da linguagem. Iremos aprende-los de forma te\u00f3rica e pr\u00e1tica.</p>"},{"location":"web/#cliente","title":"Cliente","text":""},{"location":"web/#conceito","title":"Conceito","text":"<p>Aquele que solicita algum servi\u00e7o/recurso ao servidor.</p>"},{"location":"web/#pratica","title":"Pr\u00e1tica","text":"<p>O seu navegador \u00e9 um cliente de recursos. Quando acessamos um site, tipicamente o navegador recupera p\u00e1ginas no formato html, folhas de estilo que ser\u00e3o respons\u00e1veis por dar cores e estilos aos elementos da p\u00e1gina. Tamb\u00e9m recupera javascripts que ser\u00e3o respons\u00e1veis por executar algumas fun\u00e7\u00f5es e imagens, v\u00eddeos, a\u00fadios, etc.</p> <p>Mas cliente n\u00e3o se limita ao navegador, por exemplo, utilizaremos o httpie para fazer requisi\u00e7\u00f5es http e solicitar recursos ao servidor.</p> <p>Execute o comando abaixo e veja o cliente de linha de comando em a\u00e7\u00e3o.</p> <pre><code>http https://cassiobotaro.dev/do_zero_a_implantacao\n</code></pre>"},{"location":"web/#servidor","title":"Servidor","text":""},{"location":"web/#conceito_1","title":"Conceito","text":"<p>Prov\u00ea um servi\u00e7o/recurso para o cliente conforme solicitado.</p>"},{"location":"web/#pratica_1","title":"Pr\u00e1tica","text":"<p>O servidor \u00e9 um processo que executa alguma tarefa, como um banco de dados, um servidor de arquivos, um servidor de e-mail, um servidor de aplica\u00e7\u00f5es, etc.</p> <p>Utilizaremos o <code>uvicorn</code> como nosso servidor da aplica\u00e7\u00e3o.</p> <p>Execute o comando abaixo e veja um servidor simples, que responde a requisi\u00e7\u00f5es com o conte\u00fado do diret\u00f3rio atual.</p> <pre><code>python -m http.server\n</code></pre>"},{"location":"web/#recurso","title":"Recurso","text":""},{"location":"web/#conceito_2","title":"Conceito","text":"<p>Um recurso \u00e9 um mapeamento de alguma coisa do mundo real para um recurso da web.</p>"},{"location":"web/#pratica_2","title":"Pr\u00e1tica","text":"<p>Um exemplo de recurso \u00e9 o wttr.in que retorna uma previs\u00e3o do tempo para um determinado local.</p> <pre><code>http wttr.in\n</code></pre> <p>Outro exemplo de recurso \u00e9 o github.com que retorna o reposit\u00f3rio do Cassio Botaro.</p> <pre><code>http https://api.github.com/users/cassiobotaro\n</code></pre>"},{"location":"web/#uris","title":"URIs","text":""},{"location":"web/#conceito_3","title":"Conceito","text":"<p>Em portugu\u00eas: Identificador de Recursos Universal, como diz o pr\u00f3prio nome, \u00e9 o identificador do recurso. Pode ser uma imagem, uma p\u00e1gina etc., pois tudo o que est\u00e1 dispon\u00edvel na internet precisa de um identificador \u00fanico para que n\u00e3o seja confundido.</p>"},{"location":"web/#pratica_3","title":"Pr\u00e1tica","text":"<p>Abra um terminal e navegue at\u00e9 dentro do nosso projeto, digite <code>http http://httpbin.org/anything</code>.</p> <p>Nesse caso nosso recurso \u00fanico acessado \u00e9 um texto em formato json, com informa\u00e7\u00f5es sobre a conex\u00e3o.</p> <p>Experimente tamb\u00e9m as seguintes URIs:</p> <p><code>http https://swapi.dev/api/people/3/</code></p> <p><code>http https://swapi.dev/api/starships/10/</code></p> <p><code>http http://httpbin.org/anything</code></p> <p><code>http http://httpbin.org/anything?argumento=valor</code></p> <p>Na primeira e segunda URI, temos a mudan\u00e7a do nosso recurso, que na primeira URI \u00e9 <code>/api/people/3/</code> e a segunda \u00e9 <code>/api/starships/10/</code>. A mudan\u00e7a nesta parte da URI que chamamos de <code>caminho</code> ou <code>path</code> \u00e9 o que caracteriza como outro recurso diferente.</p> <p>A terceira \u00e9 o mesmo <code>caminho</code> da quarta por\u00e9m a presen\u00e7a de parametros na URI pode afetar o retorno daquele recurso.</p>"},{"location":"web/#requisicao-request-e-resposta-response","title":"Requisi\u00e7\u00e3o (<code>request</code>) e Resposta (<code>response</code>)","text":""},{"location":"web/#conceito_4","title":"Conceito","text":"<p>A comunica\u00e7\u00e3o entre o servidor \u00e9 <code>stateless</code>, o que significa que n\u00e3o h\u00e1 persist\u00eancia de informa\u00e7\u00f5es. Temos ent\u00e3o dois instantes, que s\u00e3o, o momento que o pedido realizado pelo cliente chega ao servidor que referimos como requisi\u00e7\u00e3o ou popularmente conhecido como <code>request</code> e este termo \u00e9 adotado por v\u00e1rios frameworks e outro que \u00e9 a resposta do servidor ao pedido por aquele recurso, que \u00e9 conhecido como resposta ou <code>response</code>.</p> <p>A requisi\u00e7\u00e3o cont\u00e9m informa\u00e7\u00e3o sobre o pedido de um recurso, pode ser um cabe\u00e7alho indicando o tipo daquele recurso ou os tipos de retorno aceitos como resposta. Pode conter dados de um formul\u00e1rio ou argumentos para filtragem de um recurso.</p> <p>A resposta como o pr\u00f3prio nome diz, \u00e9 o recurso pedido pelo cliente. N\u00e3o necessariamente \u00e9 texto, pode ser algum tipo de recurso bin\u00e1rio como imagens.</p>"},{"location":"web/#pratica_4","title":"Pr\u00e1tica","text":"<p>Experimentem estas uri's.</p> <p><code>http http://httpbin.org/image/png</code></p> <p><code>http http://httpbin.org/encoding/utf8</code></p> <p><code>http http://httpbin.org/xml</code></p> <p>O primeiro recurso \u00e9 uma imagem em formato png, caso queira ver esta imagem, abra um navegador e cole a url l\u00e1. J\u00e1 o segundo recurso acessado \u00e9 um texto em codifica\u00e7\u00e3o utf-8. E por fim temos um texto em formato xml.</p> <p>Prestem bastante aten\u00e7\u00e3o nos cabe\u00e7alhos.</p>"},{"location":"web/#codigo-de-status","title":"C\u00f3digo de status","text":""},{"location":"web/#conceito_5","title":"Conceito","text":"<p>A resposta de um servidor pode ser sucesso ou n\u00e3o, pode ser que o recurso pedido tenha sido movido de lugar. Quando h\u00e1 um erro, como saber se o erro foi com o cliente, ou com o servidor?</p> <p>\u00c9 pensando nestas respostas que o protocolo http, utiliza c\u00f3digos que indicam o que ocorreu com a resposta.</p> <p>Os mais famosos deles s\u00e3o o <code>404 - N\u00e3o encontrado</code>, que me diz que o recurso pedido n\u00e3o foi encontrado. O <code>200 - OK</code> que significa que a resposta obteve sucesso e tamb\u00e9m <code>500 - Erro interno do servidor</code>.</p> <p>Alguns outros n\u00e3o t\u00e3o famosos mas tamb\u00e9m importantes s\u00e3o o <code>201 - Criado</code>, <code>204 - Nenhum conte\u00fado</code>, <code>301 - Movido permanentemente</code>, <code>400 - Requisi\u00e7\u00e3o inv\u00e1lida</code>e o <code>401 - N\u00e3o autorizado</code>.</p> <p>Uma lista com estes status pode ser encontrada aqui.</p> <p>\u00c9 importante saber que eles s\u00e3o divididos em categorias, aqueles iniciados com 1 s\u00e3o respostas informativas, com 2 s\u00e3o categoria de sucesso, com 3 significa uma redire\u00e7\u00e3o, com 4 erro do cliente e com 5 erro do servidor.</p>"},{"location":"web/#pratica_5","title":"Pr\u00e1tica","text":"<p>Rode o seguinte comando.</p> <p><code>http http://httpbin.org/status/418</code></p> <p>Experimente trocar o status na uri e veja as mensagens retornadas.</p>"},{"location":"web/#verbos-http","title":"Verbos HTTP","text":""},{"location":"web/#conceito_6","title":"Conceito","text":"<p>Os verbos indicam a a\u00e7\u00e3o executada sobre algum recurso. Os mais famosos s\u00e3o o <code>GET</code> e o <code>POST</code>, que s\u00e3o respons\u00e1veis respectivamente por solicitar uma representa\u00e7\u00e3o de um recurso e submeter uma entidade a um recurso espec\u00edfico, \u00e0s vezes causando uma mudan\u00e7a no estado do recurso.</p> <p>\ud83d\ude15 Uma curiosidade, voc\u00ea sabe a diferen\u00e7a entre o verbo <code>PUT</code> e o <code>PATCH</code>?</p> <p>O verbo PUT substitui todas as atuais representa\u00e7\u00f5es de seu recurso alvo pela carga de dados da requisi\u00e7\u00e3o, j\u00e1 o PATCH somente modifica parcialmente o recurso.</p> <p>Veja a lista para saber mais sobre os verbos http.</p>"},{"location":"web/#pratica_6","title":"Pr\u00e1tica","text":"<p>Veja um exemplo de <code>GET</code>.</p> <p><code>http GET http://httpbin.org/get</code></p> <p>Um exemplo de post.</p> <p><code>http POST http://httpbin.org/post data=valor</code></p> <p>Substitua o verbo e veja funcionando os outros verbos http. Fique atento que os verbos ap\u00f3s o http devem ser escritos com letra mai\u00fascula.</p> <p>Existem outros conceitos como sess\u00f5es, cookies, cabe\u00e7alhos, etc. Recomendo a leitura do documento de refer\u00eancia para saber mais sobre esses conceitos.</p> <p>\ud83d\ude0a Bem legal n\u00e3o \u00e9? E agora, j\u00e1 vamos logo escrever c\u00f3digo? Sim e n\u00e3o, vamos agora dar uma passada na linguagem Python.</p>"}]}